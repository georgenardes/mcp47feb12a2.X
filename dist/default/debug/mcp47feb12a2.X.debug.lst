

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat May 16 11:52:10 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 2.10
    20                           ; Generated 31/07/2019 GMT
    21                           ; 
    22                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4520 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	smallconst
    55  000600                     __psmallconst:
    56                           	opt callstack 0
    57  000600  00                 	db	0
    58  000601  62                 	db	98
    59  000602                     __end_of_DAC_SLAVE_ADDRESS:
    60                           	opt callstack 0
    61  0000                     _SSPBUF	set	4041
    62  0000                     _SSPSTATbits	set	4039
    63  0000                     _SSPCON2bits	set	4037
    64  0000                     _SSPADD	set	4040
    65  0000                     _SSPCON2	set	4037
    66  0000                     _SSPCON1	set	4038
    67  0000                     _SSPSTAT	set	4039
    68  0000                     _ADCON1	set	4033
    69  0000                     _TRISC5	set	31909
    70  0000                     _ACKEN	set	32300
    71  0000                     _ACKDT	set	32301
    72  0000                     _RCEN	set	32299
    73  0000                     _PEN	set	32298
    74  0000                     _ACKSTAT	set	32302
    75  0000                     _SSPIF	set	31987
    76  0000                     _SSPIE	set	31979
    77  0000                     _TRISC4	set	31908
    78  0000                     _TRISC3	set	31907
    79                           
    80                           ; #config settings
    81  000602  00                 	db	0	; dummy byte at the end
    82  0000                     
    83                           	psect	cinit
    84  00072A                     __pcinit:
    85                           	opt callstack 0
    86  00072A                     start_initialization:
    87                           	opt callstack 0
    88  00072A                     __initialization:
    89                           	opt callstack 0
    90  00072A                     end_of_initialization:
    91                           	opt callstack 0
    92  00072A                     __end_of__initialization:
    93                           	opt callstack 0
    94  00072A  0E00               	movlw	low (__Lsmallconst shr (0+16))
    95  00072C  6EF8               	movwf	tblptru,c
    96  00072E  0E06               	movlw	high __Lsmallconst
    97  000730  6EF7               	movwf	tblptrh,c
    98  000732  0100               	movlb	0
    99  000734  EF02  F003         	goto	_main	;jump to C main() function
   100                           
   101                           	psect	cstackCOMRAM
   102  000001                     __pcstackCOMRAM:
   103                           	opt callstack 0
   104  000001                     I2C_Write@data:
   105                           	opt callstack 0
   106                           
   107                           ; 1 bytes @ 0x0
   108  000001                     	ds	1
   109  000002                     I2C_Start@slave_write_address:
   110                           	opt callstack 0
   111  000002                     DAC_Write@data:
   112                           	opt callstack 0
   113                           
   114                           ; 2 bytes @ 0x1
   115  000002                     	ds	1
   116  000003                     
   117                           ; 1 bytes @ 0x2
   118  000003                     	ds	1
   119  000004                     DAC_Write@result:
   120                           	opt callstack 0
   121                           
   122                           ; 1 bytes @ 0x3
   123  000004                     	ds	1
   124  000005                     ??_main:
   125                           
   126                           ; 1 bytes @ 0x4
   127  000005                     	ds	1
   128  000006                     main@j:
   129                           	opt callstack 0
   130                           
   131                           ; 1 bytes @ 0x5
   132  000006                     	ds	1
   133  000007                     main@i:
   134                           	opt callstack 0
   135                           
   136                           ; 2 bytes @ 0x6
   137  000007                     	ds	2
   138                           
   139 ;;
   140 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   141 ;;
   142 ;; *************** function _main *****************
   143 ;; Defined at:
   144 ;;		line 14 in file "main.c"
   145 ;; Parameters:    Size  Location     Type
   146 ;;		None
   147 ;; Auto vars:     Size  Location     Type
   148 ;;  i               2    6[COMRAM] unsigned short 
   149 ;;  j               1    5[COMRAM] char 
   150 ;; Return value:  Size  Location     Type
   151 ;;                  1    wreg      void 
   152 ;; Registers used:
   153 ;;		wreg, status,2, status,0, cstack
   154 ;; Tracked objects:
   155 ;;		On entry : 0/0
   156 ;;		On exit  : 0/0
   157 ;;		Unchanged: 0/0
   158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   159 ;;      Params:         0       0       0       0       0       0       0
   160 ;;      Locals:         3       0       0       0       0       0       0
   161 ;;      Temps:          1       0       0       0       0       0       0
   162 ;;      Totals:         4       0       0       0       0       0       0
   163 ;;Total ram usage:        4 bytes
   164 ;; Hardware stack levels required when called:    4
   165 ;; This function calls:
   166 ;;		_DAC_Init
   167 ;;		_DAC_Start
   168 ;;		_DAC_Write
   169 ;;		_I2C_Init
   170 ;; This function is called by:
   171 ;;		Startup code after reset
   172 ;; This function uses a non-reentrant model
   173 ;;
   174                           
   175                           	psect	text0
   176  000604                     __ptext0:
   177                           	opt callstack 0
   178  000604                     _main:
   179                           	opt callstack 27
   180  000604                     
   181                           ;main.c: 15:     I2C_Init();
   182  000604  EC70  F003         	call	_I2C_Init	;wreg free
   183                           
   184                           ;main.c: 17:     DAC_Init();
   185  000608  EC9C  F003         	call	_DAC_Init	;wreg free
   186  00060C                     
   187                           ;main.c: 19:     unsigned short i = 0;
   188  00060C  0E00               	movlw	0
   189  00060E  6E08               	movwf	(main@i+1)^0,c
   190  000610  0E00               	movlw	0
   191  000612  6E07               	movwf	main@i^0,c
   192  000614                     
   193                           ;main.c: 20:     signed char j = 4;
   194  000614  0E04               	movlw	4
   195  000616  6E06               	movwf	main@j^0,c
   196  000618                     l917:
   197                           
   198                           ;main.c: 23:         DAC_Start();
   199  000618  ECA1  F003         	call	_DAC_Start	;wreg free
   200  00061C                     
   201                           ;main.c: 24:         DAC_Write(i);
   202  00061C  C007  F002         	movff	main@i,DAC_Write@data
   203  000620  C008  F003         	movff	main@i+1,DAC_Write@data+1
   204  000624  EC7F  F003         	call	_DAC_Write	;wreg free
   205  000628                     
   206                           ;main.c: 26:         i = i+j;
   207  000628  5007               	movf	main@i^0,w,c
   208  00062A  2406               	addwf	main@j^0,w,c
   209  00062C  6E07               	movwf	main@i^0,c
   210  00062E  0E00               	movlw	0
   211  000630  BE06               	btfsc	main@j^0,7,c
   212  000632  0EFF               	movlw	255
   213  000634  2008               	addwfc	(main@i+1)^0,w,c
   214  000636  6E08               	movwf	(main@i+1)^0,c
   215  000638                     
   216                           ;main.c: 28:         if(i < 4){
   217  000638  5008               	movf	(main@i+1)^0,w,c
   218  00063A  E107               	bnz	u121
   219  00063C  0E04               	movlw	4
   220  00063E  5C07               	subwf	main@i^0,w,c
   221  000640  B0D8               	btfsc	status,0,c
   222  000642  EF25  F003         	goto	u121
   223  000646  EF27  F003         	goto	u120
   224  00064A                     u121:
   225  00064A  EF2D  F003         	goto	l927
   226  00064E                     u120:
   227  00064E                     
   228                           ;main.c: 29:             j = 4;
   229  00064E  0E04               	movlw	4
   230  000650  6E06               	movwf	main@j^0,c
   231                           
   232                           ;main.c: 30:             i = 0;
   233  000652  0E00               	movlw	0
   234  000654  6E08               	movwf	(main@i+1)^0,c
   235  000656  0E00               	movlw	0
   236  000658  6E07               	movwf	main@i^0,c
   237  00065A                     l927:
   238                           
   239                           ;main.c: 33:         if(i > 1023){
   240  00065A  0E04               	movlw	4
   241  00065C  5C08               	subwf	(main@i+1)^0,w,c
   242  00065E  A0D8               	btfss	status,0,c
   243  000660  EF34  F003         	goto	u131
   244  000664  EF36  F003         	goto	u130
   245  000668                     u131:
   246  000668  EF3B  F003         	goto	l931
   247  00066C                     u130:
   248  00066C                     
   249                           ;main.c: 34:             j = -4;
   250  00066C  0EFC               	movlw	252
   251  00066E  6E06               	movwf	main@j^0,c
   252                           
   253                           ;main.c: 35:             i = 1023;
   254  000670  0E03               	movlw	3
   255  000672  6E08               	movwf	(main@i+1)^0,c
   256  000674  6807               	setf	main@i^0,c
   257  000676                     l931:
   258                           
   259                           ;main.c: 39:         __nop();
   260  000676  F000               	nop	
   261  000678                     
   262                           ;main.c: 41:         _delay((unsigned long)((2)*(16000000/4000.0)));
   263  000678  0E0B               	movlw	11
   264  00067A  6E05               	movwf	??_main^0,c
   265  00067C  0E62               	movlw	98
   266  00067E                     u147:
   267  00067E  2EE8               	decfsz	wreg,f,c
   268  000680  D7FE               	bra	u147
   269  000682  2E05               	decfsz	??_main^0,f,c
   270  000684  D7FC               	bra	u147
   271  000686  D000               	nop2	
   272  000688  EF0C  F003         	goto	l917
   273  00068C  EF00  F000         	goto	start
   274  000690                     __end_of_main:
   275                           	opt callstack 0
   276                           
   277 ;; *************** function _I2C_Init *****************
   278 ;; Defined at:
   279 ;;		line 3 in file "i2c_util.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;		None
   282 ;; Auto vars:     Size  Location     Type
   283 ;;		None
   284 ;; Return value:  Size  Location     Type
   285 ;;                  1    wreg      void 
   286 ;; Registers used:
   287 ;;		wreg, status,2
   288 ;; Tracked objects:
   289 ;;		On entry : 0/0
   290 ;;		On exit  : 0/0
   291 ;;		Unchanged: 0/0
   292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   293 ;;      Params:         0       0       0       0       0       0       0
   294 ;;      Locals:         0       0       0       0       0       0       0
   295 ;;      Temps:          0       0       0       0       0       0       0
   296 ;;      Totals:         0       0       0       0       0       0       0
   297 ;;Total ram usage:        0 bytes
   298 ;; Hardware stack levels used:    1
   299 ;; This function calls:
   300 ;;		Nothing
   301 ;; This function is called by:
   302 ;;		_main
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           	psect	text1
   307  0006E0                     __ptext1:
   308                           	opt callstack 0
   309  0006E0                     _I2C_Init:
   310                           	opt callstack 30
   311  0006E0                     
   312                           ;i2c_util.c: 4:     ADCON1 = 0x0F;
   313  0006E0  0E0F               	movlw	15
   314  0006E2  6EC1               	movwf	193,c	;volatile
   315  0006E4                     
   316                           ;i2c_util.c: 7:     TRISC3 = 1;
   317  0006E4  8694               	bsf	3988,3,c	;volatile
   318  0006E6                     
   319                           ;i2c_util.c: 8:     TRISC4 = 1;
   320  0006E6  8894               	bsf	3988,4,c	;volatile
   321                           
   322                           ;i2c_util.c: 11:     SSPSTAT = 0x80;
   323  0006E8  0E80               	movlw	128
   324  0006EA  6EC7               	movwf	199,c	;volatile
   325                           
   326                           ;i2c_util.c: 14:     SSPCON1 = 0x28;
   327  0006EC  0E28               	movlw	40
   328  0006EE  6EC6               	movwf	198,c	;volatile
   329                           
   330                           ;i2c_util.c: 15:     SSPCON2 = 0x00;
   331  0006F0  0E00               	movlw	0
   332  0006F2  6EC5               	movwf	197,c	;volatile
   333                           
   334                           ;i2c_util.c: 18:     SSPADD = 39;
   335  0006F4  0E27               	movlw	39
   336  0006F6  6EC8               	movwf	200,c	;volatile
   337  0006F8                     
   338                           ;i2c_util.c: 21:     SSPIE = 1;
   339  0006F8  869D               	bsf	3997,3,c	;volatile
   340  0006FA                     
   341                           ;i2c_util.c: 22:     SSPIF = 0;
   342  0006FA  969E               	bcf	3998,3,c	;volatile
   343  0006FC  0012               	return		;funcret
   344  0006FE                     __end_of_I2C_Init:
   345                           	opt callstack 0
   346                           
   347 ;; *************** function _DAC_Write *****************
   348 ;; Defined at:
   349 ;;		line 16 in file "DAC_util.c"
   350 ;; Parameters:    Size  Location     Type
   351 ;;  data            2    1[COMRAM] unsigned short 
   352 ;; Auto vars:     Size  Location     Type
   353 ;;  result          1    3[COMRAM] unsigned char 
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      unsigned char 
   356 ;; Registers used:
   357 ;;		wreg, status,2, status,0, cstack
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   363 ;;      Params:         2       0       0       0       0       0       0
   364 ;;      Locals:         1       0       0       0       0       0       0
   365 ;;      Temps:          0       0       0       0       0       0       0
   366 ;;      Totals:         3       0       0       0       0       0       0
   367 ;;Total ram usage:        3 bytes
   368 ;; Hardware stack levels used:    1
   369 ;; Hardware stack levels required when called:    2
   370 ;; This function calls:
   371 ;;		_I2C_Write
   372 ;; This function is called by:
   373 ;;		_main
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           	psect	text2
   378  0006FE                     __ptext2:
   379                           	opt callstack 0
   380  0006FE                     _DAC_Write:
   381                           	opt callstack 28
   382  0006FE                     
   383                           ;DAC_util.c: 17:     char result = 0;
   384  0006FE  0E00               	movlw	0
   385  000700  6E04               	movwf	DAC_Write@result^0,c
   386  000702                     
   387                           ;DAC_util.c: 18:     result = result | I2C_Write((unsigned char)(data>>8));
   388  000702  5003               	movf	(DAC_Write@data+1)^0,w,c
   389  000704  EC5F  F003         	call	_I2C_Write
   390  000708  1004               	iorwf	DAC_Write@result^0,w,c
   391  00070A  6E04               	movwf	DAC_Write@result^0,c
   392  00070C                     
   393                           ;DAC_util.c: 19:     result = result |I2C_Write(data);
   394  00070C  5002               	movf	DAC_Write@data^0,w,c
   395  00070E  EC5F  F003         	call	_I2C_Write
   396  000712  1004               	iorwf	DAC_Write@result^0,w,c
   397  000714  6E04               	movwf	DAC_Write@result^0,c
   398  000716  0012               	return		;funcret
   399  000718                     __end_of_DAC_Write:
   400                           	opt callstack 0
   401                           
   402 ;; *************** function _DAC_Start *****************
   403 ;; Defined at:
   404 ;;		line 11 in file "DAC_util.c"
   405 ;; Parameters:    Size  Location     Type
   406 ;;		None
   407 ;; Auto vars:     Size  Location     Type
   408 ;;		None
   409 ;; Return value:  Size  Location     Type
   410 ;;                  1    wreg      unsigned char 
   411 ;; Registers used:
   412 ;;		wreg, cstack
   413 ;; Tracked objects:
   414 ;;		On entry : 0/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   418 ;;      Params:         0       0       0       0       0       0       0
   419 ;;      Locals:         0       0       0       0       0       0       0
   420 ;;      Temps:          0       0       0       0       0       0       0
   421 ;;      Totals:         0       0       0       0       0       0       0
   422 ;;Total ram usage:        0 bytes
   423 ;; Hardware stack levels used:    1
   424 ;; Hardware stack levels required when called:    2
   425 ;; This function calls:
   426 ;;		_I2C_Write
   427 ;; This function is called by:
   428 ;;		_main
   429 ;; This function uses a non-reentrant model
   430 ;;
   431                           
   432                           	psect	text3
   433  000742                     __ptext3:
   434                           	opt callstack 0
   435  000742                     _DAC_Start:
   436                           	opt callstack 28
   437  000742                     
   438                           ;DAC_util.c: 13:     return I2C_Write(0x00);;	Return value of _DAC_Start is never used
   439  000742  0E00               	movlw	0
   440  000744  EC5F  F003         	call	_I2C_Write
   441  000748  0012               	return		;funcret
   442  00074A                     __end_of_DAC_Start:
   443                           	opt callstack 0
   444                           
   445 ;; *************** function _DAC_Init *****************
   446 ;; Defined at:
   447 ;;		line 4 in file "DAC_util.c"
   448 ;; Parameters:    Size  Location     Type
   449 ;;		None
   450 ;; Auto vars:     Size  Location     Type
   451 ;;		None
   452 ;; Return value:  Size  Location     Type
   453 ;;                  1    wreg      void 
   454 ;; Registers used:
   455 ;;		wreg, status,2, cstack
   456 ;; Tracked objects:
   457 ;;		On entry : 0/0
   458 ;;		On exit  : 0/0
   459 ;;		Unchanged: 0/0
   460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   461 ;;      Params:         0       0       0       0       0       0       0
   462 ;;      Locals:         0       0       0       0       0       0       0
   463 ;;      Temps:          0       0       0       0       0       0       0
   464 ;;      Totals:         0       0       0       0       0       0       0
   465 ;;Total ram usage:        0 bytes
   466 ;; Hardware stack levels used:    1
   467 ;; Hardware stack levels required when called:    3
   468 ;; This function calls:
   469 ;;		_I2C_Start
   470 ;; This function is called by:
   471 ;;		_main
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475                           	psect	text4
   476  000738                     __ptext4:
   477                           	opt callstack 0
   478  000738                     _DAC_Init:
   479                           	opt callstack 27
   480  000738                     
   481                           ;DAC_util.c: 6:     TRISC5 = 0;
   482  000738  9A94               	bcf	3988,5,c	;volatile
   483  00073A  0EC4               	movlw	196
   484  00073C  EC48  F003         	call	_I2C_Start
   485  000740  0012               	return		;funcret
   486  000742                     __end_of_DAC_Init:
   487                           	opt callstack 0
   488                           
   489 ;; *************** function _I2C_Start *****************
   490 ;; Defined at:
   491 ;;		line 25 in file "i2c_util.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;  slave_write_    1    wreg     unsigned char 
   494 ;; Auto vars:     Size  Location     Type
   495 ;;  slave_write_    1    1[COMRAM] unsigned char 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      unsigned char 
   498 ;; Registers used:
   499 ;;		wreg, status,2, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   505 ;;      Params:         0       0       0       0       0       0       0
   506 ;;      Locals:         1       0       0       0       0       0       0
   507 ;;      Temps:          0       0       0       0       0       0       0
   508 ;;      Totals:         1       0       0       0       0       0       0
   509 ;;Total ram usage:        1 bytes
   510 ;; Hardware stack levels used:    1
   511 ;; Hardware stack levels required when called:    2
   512 ;; This function calls:
   513 ;;		_I2C_Write
   514 ;; This function is called by:
   515 ;;		_DAC_Init
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text5
   520  000690                     __ptext5:
   521                           	opt callstack 0
   522  000690                     _I2C_Start:
   523                           	opt callstack 27
   524                           
   525                           ;incstack = 0
   526                           ;I2C_Start@slave_write_address stored from wreg
   527  000690  6E02               	movwf	I2C_Start@slave_write_address^0,c
   528  000692                     
   529                           ;i2c_util.c: 27:     SSPCON2bits.SEN = 1;
   530  000692  80C5               	bsf	197,0,c	;volatile
   531  000694                     l70:
   532  000694  B0C5               	btfsc	197,0,c	;volatile
   533  000696  EF4F  F003         	goto	u31
   534  00069A  EF51  F003         	goto	u30
   535  00069E                     u31:
   536  00069E  EF4A  F003         	goto	l70
   537  0006A2                     u30:
   538  0006A2                     
   539                           ;i2c_util.c: 33:     SSPIF = 0;
   540  0006A2  969E               	bcf	3998,3,c	;volatile
   541                           
   542                           ;i2c_util.c: 36:     if (!SSPSTATbits.S)
   543  0006A4  B6C7               	btfsc	199,3,c	;volatile
   544  0006A6  EF57  F003         	goto	u41
   545  0006AA  EF59  F003         	goto	u40
   546  0006AE                     u41:
   547  0006AE  EF5B  F003         	goto	l827
   548  0006B2                     u40:
   549  0006B2  EF5E  F003         	goto	l74
   550  0006B6                     l827:
   551                           
   552                           ;i2c_util.c: 40:     return (I2C_Write(slave_write_address));;	Return value of _I2C_Star
      +                          t is never used
   553  0006B6  5002               	movf	I2C_Start@slave_write_address^0,w,c
   554  0006B8  EC5F  F003         	call	_I2C_Write
   555  0006BC                     l74:
   556  0006BC  0012               	return		;funcret
   557  0006BE                     __end_of_I2C_Start:
   558                           	opt callstack 0
   559                           
   560 ;; *************** function _I2C_Write *****************
   561 ;; Defined at:
   562 ;;		line 51 in file "i2c_util.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;  data            1    wreg     unsigned char 
   565 ;; Auto vars:     Size  Location     Type
   566 ;;  data            1    0[COMRAM] unsigned char 
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      unsigned char 
   569 ;; Registers used:
   570 ;;		wreg, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   576 ;;      Params:         0       0       0       0       0       0       0
   577 ;;      Locals:         1       0       0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0       0       0
   579 ;;      Totals:         1       0       0       0       0       0       0
   580 ;;Total ram usage:        1 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; Hardware stack levels required when called:    1
   583 ;; This function calls:
   584 ;;		_I2C_Ready
   585 ;; This function is called by:
   586 ;;		_I2C_Start
   587 ;;		_DAC_Start
   588 ;;		_DAC_Write
   589 ;; This function uses a non-reentrant model
   590 ;;
   591                           
   592                           	psect	text6
   593  0006BE                     __ptext6:
   594                           	opt callstack 0
   595  0006BE                     _I2C_Write:
   596                           	opt callstack 28
   597                           
   598                           ;incstack = 0
   599                           ;I2C_Write@data stored from wreg
   600  0006BE  6E01               	movwf	I2C_Write@data^0,c
   601  0006C0                     
   602                           ;i2c_util.c: 53:     SSPBUF = data;
   603  0006C0  C001  FFC9         	movff	I2C_Write@data,4041	;volatile
   604  0006C4                     
   605                           ;i2c_util.c: 56:     I2C_Ready();
   606  0006C4  EC8C  F003         	call	_I2C_Ready	;wreg free
   607  0006C8                     
   608                           ;i2c_util.c: 59:     if (ACKSTAT)
   609  0006C8  ACC5               	btfss	4037,6,c	;volatile
   610  0006CA  EF69  F003         	goto	u21
   611  0006CE  EF6B  F003         	goto	u20
   612  0006D2                     u21:
   613  0006D2  EF6E  F003         	goto	l819
   614  0006D6                     u20:
   615  0006D6                     
   616                           ;i2c_util.c: 60:         return 1;
   617  0006D6  0E01               	movlw	1
   618  0006D8  EF6F  F003         	goto	l84
   619  0006DC                     l819:
   620                           
   621                           ;i2c_util.c: 62:         return 2;
   622  0006DC  0E02               	movlw	2
   623  0006DE                     l84:
   624  0006DE  0012               	return		;funcret
   625  0006E0                     __end_of_I2C_Write:
   626                           	opt callstack 0
   627                           
   628 ;; *************** function _I2C_Ready *****************
   629 ;; Defined at:
   630 ;;		line 43 in file "i2c_util.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;		None
   633 ;; Auto vars:     Size  Location     Type
   634 ;;		None
   635 ;; Return value:  Size  Location     Type
   636 ;;                  1    wreg      void 
   637 ;; Registers used:
   638 ;;		None
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   644 ;;      Params:         0       0       0       0       0       0       0
   645 ;;      Locals:         0       0       0       0       0       0       0
   646 ;;      Temps:          0       0       0       0       0       0       0
   647 ;;      Totals:         0       0       0       0       0       0       0
   648 ;;Total ram usage:        0 bytes
   649 ;; Hardware stack levels used:    1
   650 ;; This function calls:
   651 ;;		Nothing
   652 ;; This function is called by:
   653 ;;		_I2C_Write
   654 ;;		_I2C_Read
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           	psect	text7
   659  000718                     __ptext7:
   660                           	opt callstack 0
   661  000718                     _I2C_Ready:
   662                           	opt callstack 28
   663  000718                     l77:
   664  000718  A69E               	btfss	3998,3,c	;volatile
   665  00071A  EF91  F003         	goto	u11
   666  00071E  EF93  F003         	goto	u10
   667  000722                     u11:
   668  000722  EF8C  F003         	goto	l77
   669  000726                     u10:
   670  000726                     
   671                           ;i2c_util.c: 48:     SSPIF = 0;
   672  000726  969E               	bcf	3998,3,c	;volatile
   673  000728  0012               	return		;funcret
   674  00072A                     __end_of_I2C_Ready:
   675                           	opt callstack 0
   676                           
   677                           	psect	rparam
   678  0000                     tosu	equ	0xFFF
   679                           tosh	equ	0xFFE
   680                           tosl	equ	0xFFD
   681                           stkptr	equ	0xFFC
   682                           pclatu	equ	0xFFB
   683                           pclath	equ	0xFFA
   684                           pcl	equ	0xFF9
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           prodh	equ	0xFF4
   690                           prodl	equ	0xFF3
   691                           indf0	equ	0xFEF
   692                           postinc0	equ	0xFEE
   693                           postdec0	equ	0xFED
   694                           preinc0	equ	0xFEC
   695                           plusw0	equ	0xFEB
   696                           fsr0h	equ	0xFEA
   697                           fsr0l	equ	0xFE9
   698                           wreg	equ	0xFE8
   699                           indf1	equ	0xFE7
   700                           postinc1	equ	0xFE6
   701                           postdec1	equ	0xFE5
   702                           preinc1	equ	0xFE4
   703                           plusw1	equ	0xFE3
   704                           fsr1h	equ	0xFE2
   705                           fsr1l	equ	0xFE1
   706                           bsr	equ	0xFE0
   707                           indf2	equ	0xFDF
   708                           postinc2	equ	0xFDE
   709                           postdec2	equ	0xFDD
   710                           preinc2	equ	0xFDC
   711                           plusw2	equ	0xFDB
   712                           fsr2h	equ	0xFDA
   713                           fsr2l	equ	0xFD9
   714                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      8       8
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_DAC_Write
    _DAC_Write->_I2C_Write
    _DAC_Start->_I2C_Write
    _DAC_Init->_I2C_Start
    _I2C_Start->_I2C_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     350
                                              4 COMRAM     4     4      0
                           _DAC_Init
                          _DAC_Start
                          _DAC_Write
                           _I2C_Init
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DAC_Write                                            3     1      2     188
                                              1 COMRAM     3     1      2
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DAC_Start                                            0     0      0      15
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DAC_Init                                             0     0      0      30
                          _I2C_Start
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            1     1      0      30
                                              1 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      15
                                              0 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (3) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Init
     _I2C_Start
       _I2C_Write
         _I2C_Ready
   _DAC_Start
     _I2C_Write
       _I2C_Ready
   _DAC_Write
     _I2C_Write
       _I2C_Ready
   _I2C_Init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      8       8       1        6.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat May 16 11:52:10 2020

          __size_of_I2C_Ready 0012            __size_of_I2C_Start 002E                   _SSPSTATbits 000FC7  
          __size_of_I2C_Write 0022                            l70 0694                            l80 0728  
                          l72 06A2                            l74 06BC                            l67 06FC  
                          l84 06DE                            l77 0718                            l79 0726  
                          u10 0726                            u11 0722                            u20 06D6  
                          u21 06D2                            u30 06A2                            u31 069E  
                          u40 06B2                            u41 06AE                   __CFG_OSC$HS 000000  
          __size_of_DAC_Start 0008            __size_of_DAC_Write 001A                           l123 0740  
                         l126 0748                           l129 0716                           l811 06C8  
                         l805 0718                           l813 06D6                           l807 06C0  
                         l823 0692                           l903 06FE                           l831 06E0  
                         l911 0604                           l809 06C4                           l841 0738  
                         l905 0702                           l833 06E4                           l921 0628  
                         l913 060C                           l819 06DC                           l827 06B6  
                         l843 073A                           l907 070C                           l835 06E6  
                         l931 0676                           l923 0638                           l915 0614  
                         l845 0742                           l837 06F8                           l933 0678  
                         l925 064E                           l917 0618                           l839 06FA  
                         l927 065A                           l919 061C                           l929 066C  
                         u120 064E                           u121 064A                           u130 066C  
                         u131 0668                           u147 067E                           _PEN 007E2A  
                         wreg 000FE8                  __CFG_WDT$OFF 000000                          _RCEN 007E2B  
                        _main 0604              __end_of_I2C_Init 06FE              __end_of_DAC_Init 0742  
                        start 0000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
                       ?_main 0001                         _ACKEN 007E2C                         _ACKDT 007E2D  
                       _SSPIE 007CEB                         _SSPIF 007CF3             __end_of_I2C_Ready 072A  
                       main@i 0007                         main@j 0006             __end_of_I2C_Start 06BE  
           __end_of_I2C_Write 06E0                         status 000FD8             __end_of_DAC_Start 074A  
           __end_of_DAC_Write 0718               __initialization 072A                  __end_of_main 0690  
               DAC_Write@data 0002                        ??_main 0005                 __activetblptr 000001  
                      _ADCON1 000FC1                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _TRISC5 007CA5                        _SSPBUF 000FC9  
                   ?_I2C_Init 0001                  __mediumconst 0000                     ?_DAC_Init 0001  
                      tblptrh 000FF7                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 072A                 ___rparam_used 000001                __pcstackCOMRAM 0001  
                  ??_I2C_Init 0001                    ??_DAC_Init 0003                       _ACKSTAT 007E2E  
                     _SSPCON1 000FC6                       _SSPCON2 000FC5                       _SSPSTAT 000FC7  
           _DAC_SLAVE_ADDRESS 0601                     _I2C_Ready 0718                     _I2C_Start 0690  
                   _I2C_Write 06BE                       __Hparam 0000                       __Lparam 0000  
                   _DAC_Start 0742                     _DAC_Write 06FE                  __psmallconst 0600  
                     __pcinit 072A                       __ramtop 0600                       __ptext0 0604  
                     __ptext1 06E0                       __ptext2 06FE                       __ptext3 0742  
                     __ptext4 0738                       __ptext5 0690                       __ptext6 06BE  
                     __ptext7 0718          end_of_initialization 072A     __end_of_DAC_SLAVE_ADDRESS 0602  
                  ?_I2C_Ready 0001                    ?_I2C_Start 0001                    ?_I2C_Write 0001  
                  ?_DAC_Start 0001                    ?_DAC_Write 0002             __size_of_I2C_Init 001E  
           __size_of_DAC_Init 000A           start_initialization 072A                   ??_I2C_Ready 0001  
                 ??_I2C_Start 0002                   ??_I2C_Write 0001               DAC_Write@result 0004  
                 ??_DAC_Start 0002                   ??_DAC_Write 0004                   __smallconst 0600  
                    _I2C_Init 06E0                      _DAC_Init 0738  I2C_Start@slave_write_address 0002  
                    __Hrparam 0000                      __Lrparam 0000                  __Lsmallconst 0600  
               I2C_Write@data 0001                 __size_of_main 008C                   _SSPCON2bits 000FC5  
