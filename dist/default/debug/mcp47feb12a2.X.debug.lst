

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon May 18 18:34:42 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 2.10
    21                           ; Generated 31/07/2019 GMT
    22                           ; 
    23                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4520 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	smallconst
    56  000600                     __psmallconst:
    57                           	opt callstack 0
    58  000600  00                 	db	0
    59  000601  62                 	db	98
    60  000602                     __end_of_DAC_SLAVE_ADDRESS:
    61                           	opt callstack 0
    62  0000                     _SSPBUF	set	4041
    63  0000                     _SSPSTATbits	set	4039
    64  0000                     _SSPCON2bits	set	4037
    65  0000                     _SSPADD	set	4040
    66  0000                     _SSPCON2	set	4037
    67  0000                     _SSPCON1	set	4038
    68  0000                     _SSPSTAT	set	4039
    69  0000                     _ADCON1	set	4033
    70  0000                     _TRISC5	set	31909
    71  0000                     _ACKEN	set	32300
    72  0000                     _ACKDT	set	32301
    73  0000                     _RCEN	set	32299
    74  0000                     _PEN	set	32298
    75  0000                     _ACKSTAT	set	32302
    76  0000                     _SSPIF	set	31987
    77  0000                     _SSPIE	set	31979
    78  0000                     _TRISC4	set	31908
    79  0000                     _TRISC3	set	31907
    80                           
    81                           ; #config settings
    82  000602  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  0007D8                     __pcinit:
    86                           	opt callstack 0
    87  0007D8                     start_initialization:
    88                           	opt callstack 0
    89  0007D8                     __initialization:
    90                           	opt callstack 0
    91  0007D8                     end_of_initialization:
    92                           	opt callstack 0
    93  0007D8                     __end_of__initialization:
    94                           	opt callstack 0
    95  0007D8  0E00               	movlw	low (__Lsmallconst shr (0+16))
    96  0007DA  6EF8               	movwf	tblptru,c
    97  0007DC  0E06               	movlw	high __Lsmallconst
    98  0007DE  6EF7               	movwf	tblptrh,c
    99  0007E0  0100               	movlb	0
   100  0007E2  EF02  F003         	goto	_main	;jump to C main() function
   101                           
   102                           	psect	cstackCOMRAM
   103  000001                     __pcstackCOMRAM:
   104                           	opt callstack 0
   105  000001                     I2C_Write@data:
   106                           	opt callstack 0
   107                           
   108                           ; 1 bytes @ 0x0
   109  000001                     	ds	1
   110  000002                     I2C_Start@slave_write_address:
   111                           	opt callstack 0
   112  000002                     DAC_Start@command:
   113                           	opt callstack 0
   114  000002                     DAC_Write@data:
   115                           	opt callstack 0
   116                           
   117                           ; 2 bytes @ 0x1
   118  000002                     	ds	1
   119  000003                     ??_DAC_Start:
   120                           
   121                           ; 1 bytes @ 0x2
   122  000003                     	ds	1
   123  000004                     DAC_Start@adress:
   124                           	opt callstack 0
   125  000004                     DAC_Write@result:
   126                           	opt callstack 0
   127                           
   128                           ; 1 bytes @ 0x3
   129  000004                     	ds	1
   130  000005                     DAC_Start@variable:
   131                           	opt callstack 0
   132                           
   133                           ; 1 bytes @ 0x4
   134  000005                     	ds	1
   135  000006                     ??_main:
   136                           
   137                           ; 1 bytes @ 0x5
   138  000006                     	ds	1
   139  000007                     main@j:
   140                           	opt callstack 0
   141                           
   142                           ; 1 bytes @ 0x6
   143  000007                     	ds	1
   144  000008                     main@j2:
   145                           	opt callstack 0
   146                           
   147                           ; 1 bytes @ 0x7
   148  000008                     	ds	1
   149  000009                     main@i:
   150                           	opt callstack 0
   151                           
   152                           ; 2 bytes @ 0x8
   153  000009                     	ds	2
   154  00000B                     main@k:
   155                           	opt callstack 0
   156                           
   157                           ; 2 bytes @ 0xA
   158  00000B                     	ds	2
   159                           
   160 ;;
   161 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   162 ;;
   163 ;; *************** function _main *****************
   164 ;; Defined at:
   165 ;;		line 14 in file "main.c"
   166 ;; Parameters:    Size  Location     Type
   167 ;;		None
   168 ;; Auto vars:     Size  Location     Type
   169 ;;  k               2   10[COMRAM] unsigned short 
   170 ;;  i               2    8[COMRAM] unsigned short 
   171 ;;  j2              1    7[COMRAM] char 
   172 ;;  j               1    6[COMRAM] char 
   173 ;; Return value:  Size  Location     Type
   174 ;;                  1    wreg      void 
   175 ;; Registers used:
   176 ;;		wreg, status,2, status,0, cstack
   177 ;; Tracked objects:
   178 ;;		On entry : 0/0
   179 ;;		On exit  : 0/0
   180 ;;		Unchanged: 0/0
   181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   182 ;;      Params:         0       0       0       0       0       0       0
   183 ;;      Locals:         6       0       0       0       0       0       0
   184 ;;      Temps:          1       0       0       0       0       0       0
   185 ;;      Totals:         7       0       0       0       0       0       0
   186 ;;Total ram usage:        7 bytes
   187 ;; Hardware stack levels required when called:    4
   188 ;; This function calls:
   189 ;;		_DAC_Init
   190 ;;		_DAC_Start
   191 ;;		_DAC_Write
   192 ;;		_I2C_Init
   193 ;;		_I2C_Stop
   194 ;; This function is called by:
   195 ;;		Startup code after reset
   196 ;; This function uses a non-reentrant model
   197 ;;
   198                           
   199                           	psect	text0
   200  000604                     __ptext0:
   201                           	opt callstack 0
   202  000604                     _main:
   203                           	opt callstack 27
   204  000604                     
   205                           ;main.c: 15:     I2C_Init();
   206  000604  ECAF  F003         	call	_I2C_Init	;wreg free
   207  000608                     
   208                           ;main.c: 17:     unsigned short i = 0, k = 1023;
   209  000608  0E00               	movlw	0
   210  00060A  6E0A               	movwf	(main@i+1)^0,c
   211  00060C  0E00               	movlw	0
   212  00060E  6E09               	movwf	main@i^0,c
   213  000610  0E03               	movlw	3
   214  000612  6E0C               	movwf	(main@k+1)^0,c
   215  000614  680B               	setf	main@k^0,c
   216  000616                     
   217                           ;main.c: 18:     signed char j = 4, j2 = 4;
   218  000616  0E04               	movlw	4
   219  000618  6E07               	movwf	main@j^0,c
   220  00061A  0E04               	movlw	4
   221  00061C  6E08               	movwf	main@j2^0,c
   222  00061E                     l19:
   223                           
   224                           ;main.c: 21:         DAC_Init();
   225  00061E  ECF3  F003         	call	_DAC_Init	;wreg free
   226  000622                     
   227                           ;main.c: 22:         DAC_Start(0x00,0x00);
   228  000622  0E00               	movlw	0
   229  000624  6E02               	movwf	DAC_Start@command^0,c
   230  000626  0E00               	movlw	0
   231  000628  ECCB  F003         	call	_DAC_Start
   232  00062C                     
   233                           ;main.c: 23:         DAC_Write(i);
   234  00062C  C009  F002         	movff	main@i,DAC_Write@data
   235  000630  C00A  F003         	movff	main@i+1,DAC_Write@data+1
   236  000634  ECBE  F003         	call	_DAC_Write	;wreg free
   237  000638                     
   238                           ;main.c: 24:         I2C_Stop();
   239  000638  ECD8  F003         	call	_I2C_Stop	;wreg free
   240  00063C                     
   241                           ;main.c: 27:         DAC_Init();
   242  00063C  ECF3  F003         	call	_DAC_Init	;wreg free
   243  000640                     
   244                           ;main.c: 28:         DAC_Start(0x01,0x00);
   245  000640  0E00               	movlw	0
   246  000642  6E02               	movwf	DAC_Start@command^0,c
   247  000644  0E01               	movlw	1
   248  000646  ECCB  F003         	call	_DAC_Start
   249  00064A                     
   250                           ;main.c: 29:         DAC_Write(k);
   251  00064A  C00B  F002         	movff	main@k,DAC_Write@data
   252  00064E  C00C  F003         	movff	main@k+1,DAC_Write@data+1
   253  000652  ECBE  F003         	call	_DAC_Write	;wreg free
   254                           
   255                           ;main.c: 30:         I2C_Stop();
   256  000656  ECD8  F003         	call	_I2C_Stop	;wreg free
   257  00065A                     
   258                           ;main.c: 32:         i = i+j;
   259  00065A  5009               	movf	main@i^0,w,c
   260  00065C  2407               	addwf	main@j^0,w,c
   261  00065E  6E09               	movwf	main@i^0,c
   262  000660  0E00               	movlw	0
   263  000662  BE07               	btfsc	main@j^0,7,c
   264  000664  0EFF               	movlw	255
   265  000666  200A               	addwfc	(main@i+1)^0,w,c
   266  000668  6E0A               	movwf	(main@i+1)^0,c
   267  00066A                     
   268                           ;main.c: 33:         k = k + j2;
   269  00066A  500B               	movf	main@k^0,w,c
   270  00066C  2408               	addwf	main@j2^0,w,c
   271  00066E  6E0B               	movwf	main@k^0,c
   272  000670  0E00               	movlw	0
   273  000672  BE08               	btfsc	main@j2^0,7,c
   274  000674  0EFF               	movlw	255
   275  000676  200C               	addwfc	(main@k+1)^0,w,c
   276  000678  6E0C               	movwf	(main@k+1)^0,c
   277  00067A                     
   278                           ;main.c: 34:         if(i < 4 ){
   279  00067A  500A               	movf	(main@i+1)^0,w,c
   280  00067C  E107               	bnz	u141
   281  00067E  0E04               	movlw	4
   282  000680  5C09               	subwf	main@i^0,w,c
   283  000682  B0D8               	btfsc	status,0,c
   284  000684  EF46  F003         	goto	u141
   285  000688  EF48  F003         	goto	u140
   286  00068C                     u141:
   287  00068C  EF4E  F003         	goto	l975
   288  000690                     u140:
   289  000690                     
   290                           ;main.c: 35:             j = 4;
   291  000690  0E04               	movlw	4
   292  000692  6E07               	movwf	main@j^0,c
   293                           
   294                           ;main.c: 36:             i = 0;
   295  000694  0E00               	movlw	0
   296  000696  6E0A               	movwf	(main@i+1)^0,c
   297  000698  0E00               	movlw	0
   298  00069A  6E09               	movwf	main@i^0,c
   299  00069C                     l975:
   300                           
   301                           ;main.c: 38:         if(k < 4){
   302  00069C  500C               	movf	(main@k+1)^0,w,c
   303  00069E  E107               	bnz	u151
   304  0006A0  0E04               	movlw	4
   305  0006A2  5C0B               	subwf	main@k^0,w,c
   306  0006A4  B0D8               	btfsc	status,0,c
   307  0006A6  EF57  F003         	goto	u151
   308  0006AA  EF59  F003         	goto	u150
   309  0006AE                     u151:
   310  0006AE  EF5F  F003         	goto	l979
   311  0006B2                     u150:
   312  0006B2                     
   313                           ;main.c: 39:             j2 = 4;
   314  0006B2  0E04               	movlw	4
   315  0006B4  6E08               	movwf	main@j2^0,c
   316                           
   317                           ;main.c: 40:             k = 0;
   318  0006B6  0E00               	movlw	0
   319  0006B8  6E0C               	movwf	(main@k+1)^0,c
   320  0006BA  0E00               	movlw	0
   321  0006BC  6E0B               	movwf	main@k^0,c
   322  0006BE                     l979:
   323                           
   324                           ;main.c: 43:         if(k > 1023 ){
   325  0006BE  0E04               	movlw	4
   326  0006C0  5C0C               	subwf	(main@k+1)^0,w,c
   327  0006C2  A0D8               	btfss	status,0,c
   328  0006C4  EF66  F003         	goto	u161
   329  0006C8  EF68  F003         	goto	u160
   330  0006CC                     u161:
   331  0006CC  EF6D  F003         	goto	l983
   332  0006D0                     u160:
   333  0006D0                     
   334                           ;main.c: 44:             j2 = -4;
   335  0006D0  0EFC               	movlw	252
   336  0006D2  6E08               	movwf	main@j2^0,c
   337                           
   338                           ;main.c: 45:             k = 1023;
   339  0006D4  0E03               	movlw	3
   340  0006D6  6E0C               	movwf	(main@k+1)^0,c
   341  0006D8  680B               	setf	main@k^0,c
   342  0006DA                     l983:
   343                           
   344                           ;main.c: 49:         if(i > 1023){
   345  0006DA  0E04               	movlw	4
   346  0006DC  5C0A               	subwf	(main@i+1)^0,w,c
   347  0006DE  A0D8               	btfss	status,0,c
   348  0006E0  EF74  F003         	goto	u171
   349  0006E4  EF76  F003         	goto	u170
   350  0006E8                     u171:
   351  0006E8  EF7B  F003         	goto	l987
   352  0006EC                     u170:
   353  0006EC                     
   354                           ;main.c: 50:             j = -4;
   355  0006EC  0EFC               	movlw	252
   356  0006EE  6E07               	movwf	main@j^0,c
   357                           
   358                           ;main.c: 51:             i = 1023;
   359  0006F0  0E03               	movlw	3
   360  0006F2  6E0A               	movwf	(main@i+1)^0,c
   361  0006F4  6809               	setf	main@i^0,c
   362  0006F6                     l987:
   363                           
   364                           ;main.c: 54:         _delay((unsigned long)((1)*(16000000/4000.0)));
   365  0006F6  0E06               	movlw	6
   366  0006F8  6E06               	movwf	??_main^0,c
   367  0006FA  0E30               	movlw	48
   368  0006FC                     u187:
   369  0006FC  2EE8               	decfsz	wreg,f,c
   370  0006FE  D7FE               	bra	u187
   371  000700  2E06               	decfsz	??_main^0,f,c
   372  000702  D7FC               	bra	u187
   373  000704  D000               	nop2	
   374  000706  EF0F  F003         	goto	l19
   375  00070A  EF00  F000         	goto	start
   376  00070E                     __end_of_main:
   377                           	opt callstack 0
   378                           
   379 ;; *************** function _I2C_Stop *****************
   380 ;; Defined at:
   381 ;;		line 65 in file "i2c_util.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;		None
   384 ;; Auto vars:     Size  Location     Type
   385 ;;		None
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      unsigned char 
   388 ;; Registers used:
   389 ;;		wreg
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   395 ;;      Params:         0       0       0       0       0       0       0
   396 ;;      Locals:         0       0       0       0       0       0       0
   397 ;;      Temps:          0       0       0       0       0       0       0
   398 ;;      Totals:         0       0       0       0       0       0       0
   399 ;;Total ram usage:        0 bytes
   400 ;; Hardware stack levels used:    1
   401 ;; This function calls:
   402 ;;		Nothing
   403 ;; This function is called by:
   404 ;;		_main
   405 ;; This function uses a non-reentrant model
   406 ;;
   407                           
   408                           	psect	text1
   409  0007B0                     __ptext1:
   410                           	opt callstack 0
   411  0007B0                     _I2C_Stop:
   412                           	opt callstack 30
   413  0007B0                     
   414                           ;i2c_util.c: 67:     PEN = 1;
   415  0007B0  84C5               	bsf	4037,2,c	;volatile
   416  0007B2                     l90:
   417  0007B2  B4C5               	btfsc	4037,2,c	;volatile
   418  0007B4  EFDE  F003         	goto	u51
   419  0007B8  EFE0  F003         	goto	u50
   420  0007BC                     u51:
   421  0007BC  EFD9  F003         	goto	l90
   422  0007C0                     u50:
   423  0007C0                     
   424                           ;i2c_util.c: 73:     SSPIF = 0;
   425  0007C0  969E               	bcf	3998,3,c	;volatile
   426                           
   427                           ;i2c_util.c: 76:     if (!SSPSTATbits.P)
   428  0007C2  50C7               	movf	199,w,c	;volatile
   429  0007C4  0012               	return		;funcret
   430  0007C6                     __end_of_I2C_Stop:
   431                           	opt callstack 0
   432                           
   433 ;; *************** function _I2C_Init *****************
   434 ;; Defined at:
   435 ;;		line 3 in file "i2c_util.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;		None
   438 ;; Auto vars:     Size  Location     Type
   439 ;;		None
   440 ;; Return value:  Size  Location     Type
   441 ;;                  1    wreg      void 
   442 ;; Registers used:
   443 ;;		wreg, status,2
   444 ;; Tracked objects:
   445 ;;		On entry : 0/0
   446 ;;		On exit  : 0/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   449 ;;      Params:         0       0       0       0       0       0       0
   450 ;;      Locals:         0       0       0       0       0       0       0
   451 ;;      Temps:          0       0       0       0       0       0       0
   452 ;;      Totals:         0       0       0       0       0       0       0
   453 ;;Total ram usage:        0 bytes
   454 ;; Hardware stack levels used:    1
   455 ;; This function calls:
   456 ;;		Nothing
   457 ;; This function is called by:
   458 ;;		_main
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           	psect	text2
   463  00075E                     __ptext2:
   464                           	opt callstack 0
   465  00075E                     _I2C_Init:
   466                           	opt callstack 30
   467  00075E                     
   468                           ;i2c_util.c: 4:     ADCON1 = 0x0F;
   469  00075E  0E0F               	movlw	15
   470  000760  6EC1               	movwf	193,c	;volatile
   471  000762                     
   472                           ;i2c_util.c: 7:     TRISC3 = 1;
   473  000762  8694               	bsf	3988,3,c	;volatile
   474  000764                     
   475                           ;i2c_util.c: 8:     TRISC4 = 1;
   476  000764  8894               	bsf	3988,4,c	;volatile
   477                           
   478                           ;i2c_util.c: 11:     SSPSTAT = 0x80;
   479  000766  0E80               	movlw	128
   480  000768  6EC7               	movwf	199,c	;volatile
   481                           
   482                           ;i2c_util.c: 14:     SSPCON1 = 0x28;
   483  00076A  0E28               	movlw	40
   484  00076C  6EC6               	movwf	198,c	;volatile
   485                           
   486                           ;i2c_util.c: 15:     SSPCON2 = 0x00;
   487  00076E  0E00               	movlw	0
   488  000770  6EC5               	movwf	197,c	;volatile
   489                           
   490                           ;i2c_util.c: 18:     SSPADD = 39;
   491  000772  0E27               	movlw	39
   492  000774  6EC8               	movwf	200,c	;volatile
   493  000776                     
   494                           ;i2c_util.c: 21:     SSPIE = 1;
   495  000776  869D               	bsf	3997,3,c	;volatile
   496  000778                     
   497                           ;i2c_util.c: 22:     SSPIF = 0;
   498  000778  969E               	bcf	3998,3,c	;volatile
   499  00077A  0012               	return		;funcret
   500  00077C                     __end_of_I2C_Init:
   501                           	opt callstack 0
   502                           
   503 ;; *************** function _DAC_Write *****************
   504 ;; Defined at:
   505 ;;		line 17 in file "DAC_util.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  data            2    1[COMRAM] unsigned short 
   508 ;; Auto vars:     Size  Location     Type
   509 ;;  result          1    3[COMRAM] unsigned char 
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      unsigned char 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   519 ;;      Params:         2       0       0       0       0       0       0
   520 ;;      Locals:         1       0       0       0       0       0       0
   521 ;;      Temps:          0       0       0       0       0       0       0
   522 ;;      Totals:         3       0       0       0       0       0       0
   523 ;;Total ram usage:        3 bytes
   524 ;; Hardware stack levels used:    1
   525 ;; Hardware stack levels required when called:    2
   526 ;; This function calls:
   527 ;;		_I2C_Write
   528 ;; This function is called by:
   529 ;;		_main
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text3
   534  00077C                     __ptext3:
   535                           	opt callstack 0
   536  00077C                     _DAC_Write:
   537                           	opt callstack 28
   538  00077C                     
   539                           ;DAC_util.c: 18:     char result = 0;
   540  00077C  0E00               	movlw	0
   541  00077E  6E04               	movwf	DAC_Write@result^0,c
   542  000780                     
   543                           ;DAC_util.c: 19:     result = result | I2C_Write((unsigned char)(data>>8));
   544  000780  5003               	movf	(DAC_Write@data+1)^0,w,c
   545  000782  EC9E  F003         	call	_I2C_Write
   546  000786  1004               	iorwf	DAC_Write@result^0,w,c
   547  000788  6E04               	movwf	DAC_Write@result^0,c
   548  00078A                     
   549                           ;DAC_util.c: 20:     result = result |I2C_Write(data);
   550  00078A  5002               	movf	DAC_Write@data^0,w,c
   551  00078C  EC9E  F003         	call	_I2C_Write
   552  000790  1004               	iorwf	DAC_Write@result^0,w,c
   553  000792  6E04               	movwf	DAC_Write@result^0,c
   554  000794  0012               	return		;funcret
   555  000796                     __end_of_DAC_Write:
   556                           	opt callstack 0
   557                           
   558 ;; *************** function _DAC_Start *****************
   559 ;; Defined at:
   560 ;;		line 11 in file "DAC_util.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;  adress          1    wreg     unsigned char 
   563 ;;  command         1    1[COMRAM] unsigned char 
   564 ;; Auto vars:     Size  Location     Type
   565 ;;  adress          1    3[COMRAM] unsigned char 
   566 ;;  variable        1    4[COMRAM] unsigned char 
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      unsigned char 
   569 ;; Registers used:
   570 ;;		wreg, status,2, status,0, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   576 ;;      Params:         1       0       0       0       0       0       0
   577 ;;      Locals:         2       0       0       0       0       0       0
   578 ;;      Temps:          1       0       0       0       0       0       0
   579 ;;      Totals:         4       0       0       0       0       0       0
   580 ;;Total ram usage:        4 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; Hardware stack levels required when called:    2
   583 ;; This function calls:
   584 ;;		_I2C_Write
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text4
   591  000796                     __ptext4:
   592                           	opt callstack 0
   593  000796                     _DAC_Start:
   594                           	opt callstack 28
   595                           
   596                           ;incstack = 0
   597                           ;DAC_Start@adress stored from wreg
   598  000796  6E04               	movwf	DAC_Start@adress^0,c
   599  000798                     
   600                           ;DAC_util.c: 13:     variable = adress << 3 |command << 1 ;
   601  000798  90D8               	bcf	status,0,c
   602  00079A  3402               	rlcf	DAC_Start@command^0,w,c
   603  00079C  6E03               	movwf	??_DAC_Start^0,c
   604  00079E  3804               	swapf	DAC_Start@adress^0,w,c
   605  0007A0  42E8               	rrncf	wreg,f,c
   606  0007A2  0BF8               	andlw	248
   607  0007A4  1003               	iorwf	??_DAC_Start^0,w,c
   608  0007A6  6E05               	movwf	DAC_Start@variable^0,c
   609  0007A8                     
   610                           ;DAC_util.c: 14:     return I2C_Write(variable);;	Return value of _DAC_Start is never us
      +                          ed
   611  0007A8  5005               	movf	DAC_Start@variable^0,w,c
   612  0007AA  EC9E  F003         	call	_I2C_Write
   613  0007AE  0012               	return		;funcret
   614  0007B0                     __end_of_DAC_Start:
   615                           	opt callstack 0
   616                           
   617 ;; *************** function _DAC_Init *****************
   618 ;; Defined at:
   619 ;;		line 4 in file "DAC_util.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;		None
   622 ;; Auto vars:     Size  Location     Type
   623 ;;		None
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, status,2, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   633 ;;      Params:         0       0       0       0       0       0       0
   634 ;;      Locals:         0       0       0       0       0       0       0
   635 ;;      Temps:          0       0       0       0       0       0       0
   636 ;;      Totals:         0       0       0       0       0       0       0
   637 ;;Total ram usage:        0 bytes
   638 ;; Hardware stack levels used:    1
   639 ;; Hardware stack levels required when called:    3
   640 ;; This function calls:
   641 ;;		_I2C_Start
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           	psect	text5
   648  0007E6                     __ptext5:
   649                           	opt callstack 0
   650  0007E6                     _DAC_Init:
   651                           	opt callstack 27
   652  0007E6                     
   653                           ;DAC_util.c: 6:     TRISC5 = 0;
   654  0007E6  9A94               	bcf	3988,5,c	;volatile
   655  0007E8  0EC4               	movlw	196
   656  0007EA  EC87  F003         	call	_I2C_Start
   657  0007EE  0012               	return		;funcret
   658  0007F0                     __end_of_DAC_Init:
   659                           	opt callstack 0
   660                           
   661 ;; *************** function _I2C_Start *****************
   662 ;; Defined at:
   663 ;;		line 25 in file "i2c_util.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;  slave_write_    1    wreg     unsigned char 
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  slave_write_    1    1[COMRAM] unsigned char 
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      unsigned char 
   670 ;; Registers used:
   671 ;;		wreg, status,2, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   677 ;;      Params:         0       0       0       0       0       0       0
   678 ;;      Locals:         1       0       0       0       0       0       0
   679 ;;      Temps:          0       0       0       0       0       0       0
   680 ;;      Totals:         1       0       0       0       0       0       0
   681 ;;Total ram usage:        1 bytes
   682 ;; Hardware stack levels used:    1
   683 ;; Hardware stack levels required when called:    2
   684 ;; This function calls:
   685 ;;		_I2C_Write
   686 ;; This function is called by:
   687 ;;		_DAC_Init
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           	psect	text6
   692  00070E                     __ptext6:
   693                           	opt callstack 0
   694  00070E                     _I2C_Start:
   695                           	opt callstack 27
   696                           
   697                           ;incstack = 0
   698                           ;I2C_Start@slave_write_address stored from wreg
   699  00070E  6E02               	movwf	I2C_Start@slave_write_address^0,c
   700  000710                     
   701                           ;i2c_util.c: 27:     SSPCON2bits.SEN = 1;
   702  000710  80C5               	bsf	197,0,c	;volatile
   703  000712                     l72:
   704  000712  B0C5               	btfsc	197,0,c	;volatile
   705  000714  EF8E  F003         	goto	u31
   706  000718  EF90  F003         	goto	u30
   707  00071C                     u31:
   708  00071C  EF89  F003         	goto	l72
   709  000720                     u30:
   710  000720                     
   711                           ;i2c_util.c: 33:     SSPIF = 0;
   712  000720  969E               	bcf	3998,3,c	;volatile
   713                           
   714                           ;i2c_util.c: 36:     if (!SSPSTATbits.S)
   715  000722  B6C7               	btfsc	199,3,c	;volatile
   716  000724  EF96  F003         	goto	u41
   717  000728  EF98  F003         	goto	u40
   718  00072C                     u41:
   719  00072C  EF9A  F003         	goto	l829
   720  000730                     u40:
   721  000730  EF9D  F003         	goto	l76
   722  000734                     l829:
   723                           
   724                           ;i2c_util.c: 40:     return (I2C_Write(slave_write_address));;	Return value of _I2C_Star
      +                          t is never used
   725  000734  5002               	movf	I2C_Start@slave_write_address^0,w,c
   726  000736  EC9E  F003         	call	_I2C_Write
   727  00073A                     l76:
   728  00073A  0012               	return		;funcret
   729  00073C                     __end_of_I2C_Start:
   730                           	opt callstack 0
   731                           
   732 ;; *************** function _I2C_Write *****************
   733 ;; Defined at:
   734 ;;		line 51 in file "i2c_util.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  data            1    wreg     unsigned char 
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  data            1    0[COMRAM] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      unsigned char 
   741 ;; Registers used:
   742 ;;		wreg, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   748 ;;      Params:         0       0       0       0       0       0       0
   749 ;;      Locals:         1       0       0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0
   751 ;;      Totals:         1       0       0       0       0       0       0
   752 ;;Total ram usage:        1 bytes
   753 ;; Hardware stack levels used:    1
   754 ;; Hardware stack levels required when called:    1
   755 ;; This function calls:
   756 ;;		_I2C_Ready
   757 ;; This function is called by:
   758 ;;		_I2C_Start
   759 ;;		_DAC_Start
   760 ;;		_DAC_Write
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text7
   765  00073C                     __ptext7:
   766                           	opt callstack 0
   767  00073C                     _I2C_Write:
   768                           	opt callstack 28
   769                           
   770                           ;incstack = 0
   771                           ;I2C_Write@data stored from wreg
   772  00073C  6E01               	movwf	I2C_Write@data^0,c
   773  00073E                     
   774                           ;i2c_util.c: 53:     SSPBUF = data;
   775  00073E  C001  FFC9         	movff	I2C_Write@data,4041	;volatile
   776  000742                     
   777                           ;i2c_util.c: 56:     I2C_Ready();
   778  000742  ECE3  F003         	call	_I2C_Ready	;wreg free
   779  000746                     
   780                           ;i2c_util.c: 59:     if (ACKSTAT)
   781  000746  ACC5               	btfss	4037,6,c	;volatile
   782  000748  EFA8  F003         	goto	u21
   783  00074C  EFAA  F003         	goto	u20
   784  000750                     u21:
   785  000750  EFAD  F003         	goto	l821
   786  000754                     u20:
   787  000754                     
   788                           ;i2c_util.c: 60:         return 1;
   789  000754  0E01               	movlw	1
   790  000756  EFAE  F003         	goto	l86
   791  00075A                     l821:
   792                           
   793                           ;i2c_util.c: 62:         return 2;
   794  00075A  0E02               	movlw	2
   795  00075C                     l86:
   796  00075C  0012               	return		;funcret
   797  00075E                     __end_of_I2C_Write:
   798                           	opt callstack 0
   799                           
   800 ;; *************** function _I2C_Ready *****************
   801 ;; Defined at:
   802 ;;		line 43 in file "i2c_util.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		None
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   816 ;;      Params:         0       0       0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; This function calls:
   823 ;;		Nothing
   824 ;; This function is called by:
   825 ;;		_I2C_Write
   826 ;;		_I2C_Read
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text8
   831  0007C6                     __ptext8:
   832                           	opt callstack 0
   833  0007C6                     _I2C_Ready:
   834                           	opt callstack 28
   835  0007C6                     l79:
   836  0007C6  A69E               	btfss	3998,3,c	;volatile
   837  0007C8  EFE8  F003         	goto	u11
   838  0007CC  EFEA  F003         	goto	u10
   839  0007D0                     u11:
   840  0007D0  EFE3  F003         	goto	l79
   841  0007D4                     u10:
   842  0007D4                     
   843                           ;i2c_util.c: 48:     SSPIF = 0;
   844  0007D4  969E               	bcf	3998,3,c	;volatile
   845  0007D6  0012               	return		;funcret
   846  0007D8                     __end_of_I2C_Ready:
   847                           	opt callstack 0
   848                           
   849                           	psect	rparam
   850  0000                     tosu	equ	0xFFF
   851                           tosh	equ	0xFFE
   852                           tosl	equ	0xFFD
   853                           stkptr	equ	0xFFC
   854                           pclatu	equ	0xFFB
   855                           pclath	equ	0xFFA
   856                           pcl	equ	0xFF9
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           prodh	equ	0xFF4
   862                           prodl	equ	0xFF3
   863                           indf0	equ	0xFEF
   864                           postinc0	equ	0xFEE
   865                           postdec0	equ	0xFED
   866                           preinc0	equ	0xFEC
   867                           plusw0	equ	0xFEB
   868                           fsr0h	equ	0xFEA
   869                           fsr0l	equ	0xFE9
   870                           wreg	equ	0xFE8
   871                           indf1	equ	0xFE7
   872                           postinc1	equ	0xFE6
   873                           postdec1	equ	0xFE5
   874                           preinc1	equ	0xFE4
   875                           plusw1	equ	0xFE3
   876                           fsr1h	equ	0xFE2
   877                           fsr1l	equ	0xFE1
   878                           bsr	equ	0xFE0
   879                           indf2	equ	0xFDF
   880                           postinc2	equ	0xFDE
   881                           postdec2	equ	0xFDD
   882                           preinc2	equ	0xFDC
   883                           plusw2	equ	0xFDB
   884                           fsr2h	equ	0xFDA
   885                           fsr2l	equ	0xFD9
   886                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     12      12
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_DAC_Start
    _DAC_Write->_I2C_Write
    _DAC_Start->_I2C_Write
    _DAC_Init->_I2C_Start
    _I2C_Start->_I2C_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     763
                                              5 COMRAM     7     7      0
                           _DAC_Init
                          _DAC_Start
                          _DAC_Write
                           _I2C_Init
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DAC_Write                                            3     1      2     264
                                              1 COMRAM     3     1      2
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DAC_Start                                            4     3      1     235
                                              1 COMRAM     4     3      1
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DAC_Init                                             0     0      0      30
                          _I2C_Start
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            1     1      0      30
                                              1 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      15
                                              0 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (3) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Init
     _I2C_Start
       _I2C_Write
         _I2C_Ready
   _DAC_Start
     _I2C_Write
       _I2C_Ready
   _DAC_Write
     _I2C_Write
       _I2C_Ready
   _I2C_Init
   _I2C_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      C       C       1        9.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon May 18 18:34:42 2020

          __size_of_I2C_Ready 0012            __size_of_I2C_Start 002E                   _SSPSTATbits 000FC7  
          __size_of_I2C_Write 0022                            l19 061E                            l72 0712  
                          l81 07D4                            l82 07D6                            l74 0720  
                          l90 07B2                            l76 073A                            l92 07C0  
                          l69 077A                            l86 075C                            l94 07C4  
                          l79 07C6                            u10 07D4                            u11 07D0  
                          u20 0754                            u21 0750                            u30 0720  
                          u31 071C                            u40 0730                            u41 072C  
                          u50 07C0                            u51 07BC                   __CFG_OSC$HS 000000  
          __size_of_DAC_Start 001A            __size_of_DAC_Write 001A                           l131 0794  
                         l125 07EE                           l128 07AE                           l811 0742  
                         l821 075A                           l813 0746                           l807 07C6  
                         l815 0754                           l809 073E                           l825 0710  
                         l841 0778                           l833 075E                           l843 07E6  
                         l931 0798                           l835 0762                           l829 0734  
                         l845 07E8                           l933 07A8                           l941 078A  
                         l837 0764                           l839 0776                           l863 07B0  
                         l951 0616                           l929 0798                           l937 077C  
                         l961 063C                           l953 061A                           l945 0604  
                         l939 0780                           l971 067A                           l963 0640  
                         l955 0622                           l947 0608                           l981 06D0  
                         l973 0690                           l965 064A                           l957 062C  
                         l949 0610                           l983 06DA                           l975 069C  
                         l967 065A                           l959 0638                           l985 06EC  
                         l977 06B2                           l969 066A                           l987 06F6  
                         l979 06BE                           u140 0690                           u141 068C  
                         u150 06B2                           u151 06AE                           u160 06D0  
                         u161 06CC                           u170 06EC                           u171 06E8  
                         _PEN 007E2A                           u187 06FC                           wreg 000FE8  
                __CFG_WDT$OFF 000000                          _RCEN 007E2B                          _main 0604  
            __end_of_I2C_Init 077C              __end_of_I2C_Stop 07C6              __end_of_DAC_Init 07F0  
                        start 0000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
                       ?_main 0001                         _ACKEN 007E2C                         _ACKDT 007E2D  
                       _SSPIE 007CEB                         _SSPIF 007CF3             __end_of_I2C_Ready 07D8  
                       main@i 0009                         main@j 0007                         main@k 000B  
           __end_of_I2C_Start 073C             __end_of_I2C_Write 075E                         status 000FD8  
           __end_of_DAC_Start 07B0             __end_of_DAC_Write 0796               __initialization 07D8  
                __end_of_main 070E                 DAC_Write@data 0002                        ??_main 0006  
               __activetblptr 000001                        _ADCON1 000FC1                        _SSPADD 000FC8  
                      _TRISC3 007CA3                        _TRISC4 007CA4                        _TRISC5 007CA5  
                      _SSPBUF 000FC9                        main@j2 0008                     ?_I2C_Init 0001  
                   ?_I2C_Stop 0001                  __mediumconst 0000                     ?_DAC_Init 0001  
                      tblptrh 000FF7                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 07D8                 ___rparam_used 000001                __pcstackCOMRAM 0001  
                  ??_I2C_Init 0001                    ??_I2C_Stop 0001                    ??_DAC_Init 0003  
                     _ACKSTAT 007E2E                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7             _DAC_SLAVE_ADDRESS 0601                     _I2C_Ready 07C6  
                   _I2C_Start 070E                     _I2C_Write 073C                       __Hparam 0000  
                     __Lparam 0000                     _DAC_Start 0796                     _DAC_Write 077C  
                __psmallconst 0600                       __pcinit 07D8                       __ramtop 0600  
                     __ptext0 0604                       __ptext1 07B0                       __ptext2 075E  
                     __ptext3 077C                       __ptext4 0796                       __ptext5 07E6  
                     __ptext6 070E                       __ptext7 073C                       __ptext8 07C6  
             DAC_Start@adress 0004          end_of_initialization 07D8     __end_of_DAC_SLAVE_ADDRESS 0602  
                  ?_I2C_Ready 0001                    ?_I2C_Start 0001                    ?_I2C_Write 0001  
                  ?_DAC_Start 0002                    ?_DAC_Write 0002             __size_of_I2C_Init 001E  
           __size_of_I2C_Stop 0016             __size_of_DAC_Init 000A           start_initialization 07D8  
                 ??_I2C_Ready 0001                   ??_I2C_Start 0002                   ??_I2C_Write 0001  
             DAC_Write@result 0004                   ??_DAC_Start 0003                   ??_DAC_Write 0004  
                 __smallconst 0600                      _I2C_Init 075E                      _I2C_Stop 07B0  
                    _DAC_Init 07E6  I2C_Start@slave_write_address 0002                      __Hrparam 0000  
                    __Lrparam 0000                  __Lsmallconst 0600             DAC_Start@variable 0005  
               I2C_Write@data 0001                 __size_of_main 010A              DAC_Start@command 0002  
                 _SSPCON2bits 000FC5  
