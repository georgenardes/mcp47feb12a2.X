

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon May 18 11:43:31 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 2.10
    21                           ; Generated 31/07/2019 GMT
    22                           ; 
    23                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4520 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	smallconst
    56  000600                     __psmallconst:
    57                           	opt callstack 0
    58  000600  00                 	db	0
    59  000601  62                 	db	98
    60  000602                     __end_of_DAC_SLAVE_ADDRESS:
    61                           	opt callstack 0
    62  0000                     _SSPBUF	set	4041
    63  0000                     _SSPSTATbits	set	4039
    64  0000                     _SSPCON2bits	set	4037
    65  0000                     _SSPADD	set	4040
    66  0000                     _SSPCON2	set	4037
    67  0000                     _SSPCON1	set	4038
    68  0000                     _SSPSTAT	set	4039
    69  0000                     _ADCON1	set	4033
    70  0000                     _TRISC5	set	31909
    71  0000                     _ACKEN	set	32300
    72  0000                     _ACKDT	set	32301
    73  0000                     _RCEN	set	32299
    74  0000                     _PEN	set	32298
    75  0000                     _ACKSTAT	set	32302
    76  0000                     _SSPIF	set	31987
    77  0000                     _SSPIE	set	31979
    78  0000                     _TRISC4	set	31908
    79  0000                     _TRISC3	set	31907
    80                           
    81                           ; #config settings
    82  000602  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  00076A                     __pcinit:
    86                           	opt callstack 0
    87  00076A                     start_initialization:
    88                           	opt callstack 0
    89  00076A                     __initialization:
    90                           	opt callstack 0
    91  00076A                     end_of_initialization:
    92                           	opt callstack 0
    93  00076A                     __end_of__initialization:
    94                           	opt callstack 0
    95  00076A  0E00               	movlw	low (__Lsmallconst shr (0+16))
    96  00076C  6EF8               	movwf	tblptru,c
    97  00076E  0E06               	movlw	high __Lsmallconst
    98  000770  6EF7               	movwf	tblptrh,c
    99  000772  0100               	movlb	0
   100  000774  EF02  F003         	goto	_main	;jump to C main() function
   101                           
   102                           	psect	cstackCOMRAM
   103  000001                     __pcstackCOMRAM:
   104                           	opt callstack 0
   105  000001                     I2C_Write@data:
   106                           	opt callstack 0
   107                           
   108                           ; 1 bytes @ 0x0
   109  000001                     	ds	1
   110  000002                     I2C_Start@slave_write_address:
   111                           	opt callstack 0
   112  000002                     DAC_Start@endereco:
   113                           	opt callstack 0
   114  000002                     DAC_Write@data:
   115                           	opt callstack 0
   116                           
   117                           ; 2 bytes @ 0x1
   118  000002                     	ds	1
   119  000003                     
   120                           ; 1 bytes @ 0x2
   121  000003                     	ds	1
   122  000004                     DAC_Write@result:
   123                           	opt callstack 0
   124                           
   125                           ; 1 bytes @ 0x3
   126  000004                     	ds	1
   127  000005                     ??_main:
   128                           
   129                           ; 1 bytes @ 0x4
   130  000005                     	ds	2
   131  000007                     main@j:
   132                           	opt callstack 0
   133                           
   134                           ; 1 bytes @ 0x6
   135  000007                     	ds	1
   136  000008                     main@i:
   137                           	opt callstack 0
   138                           
   139                           ; 2 bytes @ 0x7
   140  000008                     	ds	2
   141                           
   142 ;;
   143 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   144 ;;
   145 ;; *************** function _main *****************
   146 ;; Defined at:
   147 ;;		line 14 in file "main.c"
   148 ;; Parameters:    Size  Location     Type
   149 ;;		None
   150 ;; Auto vars:     Size  Location     Type
   151 ;;  i               2    7[COMRAM] unsigned short 
   152 ;;  j               1    6[COMRAM] char 
   153 ;; Return value:  Size  Location     Type
   154 ;;                  1    wreg      void 
   155 ;; Registers used:
   156 ;;		wreg, status,2, status,0, cstack
   157 ;; Tracked objects:
   158 ;;		On entry : 0/0
   159 ;;		On exit  : 0/0
   160 ;;		Unchanged: 0/0
   161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   162 ;;      Params:         0       0       0       0       0       0       0
   163 ;;      Locals:         3       0       0       0       0       0       0
   164 ;;      Temps:          2       0       0       0       0       0       0
   165 ;;      Totals:         5       0       0       0       0       0       0
   166 ;;Total ram usage:        5 bytes
   167 ;; Hardware stack levels required when called:    4
   168 ;; This function calls:
   169 ;;		_DAC_Init
   170 ;;		_DAC_Start
   171 ;;		_DAC_Write
   172 ;;		_I2C_Init
   173 ;;		_I2C_Stop
   174 ;; This function is called by:
   175 ;;		Startup code after reset
   176 ;; This function uses a non-reentrant model
   177 ;;
   178                           
   179                           	psect	text0
   180  000604                     __ptext0:
   181                           	opt callstack 0
   182  000604                     _main:
   183                           	opt callstack 27
   184  000604                     
   185                           ;main.c: 15:     I2C_Init();
   186  000604  EC85  F003         	call	_I2C_Init	;wreg free
   187  000608                     
   188                           ;main.c: 17:     unsigned short i = 0;
   189  000608  0E00               	movlw	0
   190  00060A  6E09               	movwf	(main@i+1)^0,c
   191  00060C  0E00               	movlw	0
   192  00060E  6E08               	movwf	main@i^0,c
   193  000610                     
   194                           ;main.c: 18:     signed char j = 4;
   195  000610  0E04               	movlw	4
   196  000612  6E07               	movwf	main@j^0,c
   197  000614                     l19:
   198                           
   199                           ;main.c: 21:         DAC_Init();
   200  000614  ECC1  F003         	call	_DAC_Init	;wreg free
   201                           
   202                           ;main.c: 22:         DAC_Start(0x00);
   203  000618  0E00               	movlw	0
   204  00061A  ECBC  F003         	call	_DAC_Start
   205  00061E                     
   206                           ;main.c: 23:         DAC_Write(i);
   207  00061E  C008  F002         	movff	main@i,DAC_Write@data
   208  000622  C009  F003         	movff	main@i+1,DAC_Write@data+1
   209  000626  EC94  F003         	call	_DAC_Write	;wreg free
   210  00062A                     
   211                           ;main.c: 24:         I2C_Stop();
   212  00062A  ECA1  F003         	call	_I2C_Stop	;wreg free
   213  00062E                     
   214                           ;main.c: 26:         DAC_Init();
   215  00062E  ECC1  F003         	call	_DAC_Init	;wreg free
   216  000632                     
   217                           ;main.c: 27:         DAC_Start(0x01);
   218  000632  0E01               	movlw	1
   219  000634  ECBC  F003         	call	_DAC_Start
   220  000638                     
   221                           ;main.c: 28:         DAC_Write(i+2);
   222  000638  0E02               	movlw	2
   223  00063A  2408               	addwf	main@i^0,w,c
   224  00063C  6E02               	movwf	DAC_Write@data^0,c
   225  00063E  0E00               	movlw	0
   226  000640  2009               	addwfc	(main@i+1)^0,w,c
   227  000642  6E03               	movwf	(DAC_Write@data+1)^0,c
   228  000644  EC94  F003         	call	_DAC_Write	;wreg free
   229  000648                     
   230                           ;main.c: 29:         I2C_Stop();
   231  000648  ECA1  F003         	call	_I2C_Stop	;wreg free
   232  00064C                     
   233                           ;main.c: 31:         i = i+j;
   234  00064C  5008               	movf	main@i^0,w,c
   235  00064E  2407               	addwf	main@j^0,w,c
   236  000650  6E08               	movwf	main@i^0,c
   237  000652  0E00               	movlw	0
   238  000654  BE07               	btfsc	main@j^0,7,c
   239  000656  0EFF               	movlw	255
   240  000658  2009               	addwfc	(main@i+1)^0,w,c
   241  00065A  6E09               	movwf	(main@i+1)^0,c
   242  00065C                     
   243                           ;main.c: 33:         if(i < 4){
   244  00065C  5009               	movf	(main@i+1)^0,w,c
   245  00065E  E107               	bnz	u121
   246  000660  0E04               	movlw	4
   247  000662  5C08               	subwf	main@i^0,w,c
   248  000664  B0D8               	btfsc	status,0,c
   249  000666  EF37  F003         	goto	u121
   250  00066A  EF39  F003         	goto	u120
   251  00066E                     u121:
   252  00066E  EF3F  F003         	goto	l941
   253  000672                     u120:
   254  000672                     
   255                           ;main.c: 34:             j = 4;
   256  000672  0E04               	movlw	4
   257  000674  6E07               	movwf	main@j^0,c
   258                           
   259                           ;main.c: 35:             i = 0;
   260  000676  0E00               	movlw	0
   261  000678  6E09               	movwf	(main@i+1)^0,c
   262  00067A  0E00               	movlw	0
   263  00067C  6E08               	movwf	main@i^0,c
   264  00067E                     l941:
   265                           
   266                           ;main.c: 38:         if(i > 1023){
   267  00067E  0E04               	movlw	4
   268  000680  5C09               	subwf	(main@i+1)^0,w,c
   269  000682  A0D8               	btfss	status,0,c
   270  000684  EF46  F003         	goto	u131
   271  000688  EF48  F003         	goto	u130
   272  00068C                     u131:
   273  00068C  EF4D  F003         	goto	l945
   274  000690                     u130:
   275  000690                     
   276                           ;main.c: 39:             j = -4;
   277  000690  0EFC               	movlw	252
   278  000692  6E07               	movwf	main@j^0,c
   279                           
   280                           ;main.c: 40:             i = 1023;
   281  000694  0E03               	movlw	3
   282  000696  6E09               	movwf	(main@i+1)^0,c
   283  000698  6808               	setf	main@i^0,c
   284  00069A                     l945:
   285                           
   286                           ;main.c: 46:         _delay((unsigned long)((1000)*(16000000/4000.0)));
   287  00069A  0E15               	movlw	21
   288  00069C  6E06               	movwf	(??_main+1)^0,c
   289  00069E  0E4B               	movlw	75
   290  0006A0  6E05               	movwf	??_main^0,c
   291  0006A2  0EBE               	movlw	190
   292  0006A4                     u147:
   293  0006A4  2EE8               	decfsz	wreg,f,c
   294  0006A6  D7FE               	bra	u147
   295  0006A8  2E05               	decfsz	??_main^0,f,c
   296  0006AA  D7FC               	bra	u147
   297  0006AC  2E06               	decfsz	(??_main+1)^0,f,c
   298  0006AE  D7FA               	bra	u147
   299  0006B0  D000               	nop2	
   300  0006B2  EF0A  F003         	goto	l19
   301  0006B6  EF00  F000         	goto	start
   302  0006BA                     __end_of_main:
   303                           	opt callstack 0
   304                           
   305 ;; *************** function _I2C_Stop *****************
   306 ;; Defined at:
   307 ;;		line 65 in file "i2c_util.c"
   308 ;; Parameters:    Size  Location     Type
   309 ;;		None
   310 ;; Auto vars:     Size  Location     Type
   311 ;;		None
   312 ;; Return value:  Size  Location     Type
   313 ;;                  1    wreg      unsigned char 
   314 ;; Registers used:
   315 ;;		wreg
   316 ;; Tracked objects:
   317 ;;		On entry : 0/0
   318 ;;		On exit  : 0/0
   319 ;;		Unchanged: 0/0
   320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   321 ;;      Params:         0       0       0       0       0       0       0
   322 ;;      Locals:         0       0       0       0       0       0       0
   323 ;;      Temps:          0       0       0       0       0       0       0
   324 ;;      Totals:         0       0       0       0       0       0       0
   325 ;;Total ram usage:        0 bytes
   326 ;; Hardware stack levels used:    1
   327 ;; This function calls:
   328 ;;		Nothing
   329 ;; This function is called by:
   330 ;;		_main
   331 ;; This function uses a non-reentrant model
   332 ;;
   333                           
   334                           	psect	text1
   335  000742                     __ptext1:
   336                           	opt callstack 0
   337  000742                     _I2C_Stop:
   338                           	opt callstack 30
   339  000742                     
   340                           ;i2c_util.c: 67:     PEN = 1;
   341  000742  84C5               	bsf	4037,2,c	;volatile
   342  000744                     l88:
   343  000744  B4C5               	btfsc	4037,2,c	;volatile
   344  000746  EFA7  F003         	goto	u51
   345  00074A  EFA9  F003         	goto	u50
   346  00074E                     u51:
   347  00074E  EFA2  F003         	goto	l88
   348  000752                     u50:
   349  000752                     
   350                           ;i2c_util.c: 73:     SSPIF = 0;
   351  000752  969E               	bcf	3998,3,c	;volatile
   352                           
   353                           ;i2c_util.c: 76:     if (!SSPSTATbits.P)
   354  000754  50C7               	movf	199,w,c	;volatile
   355  000756  0012               	return		;funcret
   356  000758                     __end_of_I2C_Stop:
   357                           	opt callstack 0
   358                           
   359 ;; *************** function _I2C_Init *****************
   360 ;; Defined at:
   361 ;;		line 3 in file "i2c_util.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;		None
   364 ;; Auto vars:     Size  Location     Type
   365 ;;		None
   366 ;; Return value:  Size  Location     Type
   367 ;;                  1    wreg      void 
   368 ;; Registers used:
   369 ;;		wreg, status,2
   370 ;; Tracked objects:
   371 ;;		On entry : 0/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   375 ;;      Params:         0       0       0       0       0       0       0
   376 ;;      Locals:         0       0       0       0       0       0       0
   377 ;;      Temps:          0       0       0       0       0       0       0
   378 ;;      Totals:         0       0       0       0       0       0       0
   379 ;;Total ram usage:        0 bytes
   380 ;; Hardware stack levels used:    1
   381 ;; This function calls:
   382 ;;		Nothing
   383 ;; This function is called by:
   384 ;;		_main
   385 ;; This function uses a non-reentrant model
   386 ;;
   387                           
   388                           	psect	text2
   389  00070A                     __ptext2:
   390                           	opt callstack 0
   391  00070A                     _I2C_Init:
   392                           	opt callstack 30
   393  00070A                     
   394                           ;i2c_util.c: 4:     ADCON1 = 0x0F;
   395  00070A  0E0F               	movlw	15
   396  00070C  6EC1               	movwf	193,c	;volatile
   397  00070E                     
   398                           ;i2c_util.c: 7:     TRISC3 = 1;
   399  00070E  8694               	bsf	3988,3,c	;volatile
   400  000710                     
   401                           ;i2c_util.c: 8:     TRISC4 = 1;
   402  000710  8894               	bsf	3988,4,c	;volatile
   403                           
   404                           ;i2c_util.c: 11:     SSPSTAT = 0x80;
   405  000712  0E80               	movlw	128
   406  000714  6EC7               	movwf	199,c	;volatile
   407                           
   408                           ;i2c_util.c: 14:     SSPCON1 = 0x28;
   409  000716  0E28               	movlw	40
   410  000718  6EC6               	movwf	198,c	;volatile
   411                           
   412                           ;i2c_util.c: 15:     SSPCON2 = 0x00;
   413  00071A  0E00               	movlw	0
   414  00071C  6EC5               	movwf	197,c	;volatile
   415                           
   416                           ;i2c_util.c: 18:     SSPADD = 39;
   417  00071E  0E27               	movlw	39
   418  000720  6EC8               	movwf	200,c	;volatile
   419  000722                     
   420                           ;i2c_util.c: 21:     SSPIE = 1;
   421  000722  869D               	bsf	3997,3,c	;volatile
   422  000724                     
   423                           ;i2c_util.c: 22:     SSPIF = 0;
   424  000724  969E               	bcf	3998,3,c	;volatile
   425  000726  0012               	return		;funcret
   426  000728                     __end_of_I2C_Init:
   427                           	opt callstack 0
   428                           
   429 ;; *************** function _DAC_Write *****************
   430 ;; Defined at:
   431 ;;		line 15 in file "DAC_util.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;  data            2    1[COMRAM] unsigned short 
   434 ;; Auto vars:     Size  Location     Type
   435 ;;  result          1    3[COMRAM] unsigned char 
   436 ;; Return value:  Size  Location     Type
   437 ;;                  1    wreg      unsigned char 
   438 ;; Registers used:
   439 ;;		wreg, status,2, status,0, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   445 ;;      Params:         2       0       0       0       0       0       0
   446 ;;      Locals:         1       0       0       0       0       0       0
   447 ;;      Temps:          0       0       0       0       0       0       0
   448 ;;      Totals:         3       0       0       0       0       0       0
   449 ;;Total ram usage:        3 bytes
   450 ;; Hardware stack levels used:    1
   451 ;; Hardware stack levels required when called:    2
   452 ;; This function calls:
   453 ;;		_I2C_Write
   454 ;; This function is called by:
   455 ;;		_main
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text3
   460  000728                     __ptext3:
   461                           	opt callstack 0
   462  000728                     _DAC_Write:
   463                           	opt callstack 28
   464  000728                     
   465                           ;DAC_util.c: 16:     char result = 0;
   466  000728  0E00               	movlw	0
   467  00072A  6E04               	movwf	DAC_Write@result^0,c
   468  00072C                     
   469                           ;DAC_util.c: 17:     result = result | I2C_Write((unsigned char)(data>>8));
   470  00072C  5003               	movf	(DAC_Write@data+1)^0,w,c
   471  00072E  EC74  F003         	call	_I2C_Write
   472  000732  1004               	iorwf	DAC_Write@result^0,w,c
   473  000734  6E04               	movwf	DAC_Write@result^0,c
   474  000736                     
   475                           ;DAC_util.c: 18:     result = result |I2C_Write(data);
   476  000736  5002               	movf	DAC_Write@data^0,w,c
   477  000738  EC74  F003         	call	_I2C_Write
   478  00073C  1004               	iorwf	DAC_Write@result^0,w,c
   479  00073E  6E04               	movwf	DAC_Write@result^0,c
   480  000740  0012               	return		;funcret
   481  000742                     __end_of_DAC_Write:
   482                           	opt callstack 0
   483                           
   484 ;; *************** function _DAC_Start *****************
   485 ;; Defined at:
   486 ;;		line 11 in file "DAC_util.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;  endereco        1    wreg     unsigned char 
   489 ;; Auto vars:     Size  Location     Type
   490 ;;  endereco        1    1[COMRAM] unsigned char 
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      unsigned char 
   493 ;; Registers used:
   494 ;;		wreg, status,2, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   500 ;;      Params:         0       0       0       0       0       0       0
   501 ;;      Locals:         1       0       0       0       0       0       0
   502 ;;      Temps:          0       0       0       0       0       0       0
   503 ;;      Totals:         1       0       0       0       0       0       0
   504 ;;Total ram usage:        1 bytes
   505 ;; Hardware stack levels used:    1
   506 ;; Hardware stack levels required when called:    2
   507 ;; This function calls:
   508 ;;		_I2C_Write
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text4
   515  000778                     __ptext4:
   516                           	opt callstack 0
   517  000778                     _DAC_Start:
   518                           	opt callstack 28
   519                           
   520                           ;incstack = 0
   521                           ;DAC_Start@endereco stored from wreg
   522  000778  6E02               	movwf	DAC_Start@endereco^0,c
   523  00077A                     
   524                           ;DAC_util.c: 12:     return I2C_Write(endereco);;	Return value of _DAC_Start is never us
      +                          ed
   525  00077A  5002               	movf	DAC_Start@endereco^0,w,c
   526  00077C  EC74  F003         	call	_I2C_Write
   527  000780  0012               	return		;funcret
   528  000782                     __end_of_DAC_Start:
   529                           	opt callstack 0
   530                           
   531 ;; *************** function _DAC_Init *****************
   532 ;; Defined at:
   533 ;;		line 4 in file "DAC_util.c"
   534 ;; Parameters:    Size  Location     Type
   535 ;;		None
   536 ;; Auto vars:     Size  Location     Type
   537 ;;		None
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, status,2, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   547 ;;      Params:         0       0       0       0       0       0       0
   548 ;;      Locals:         0       0       0       0       0       0       0
   549 ;;      Temps:          0       0       0       0       0       0       0
   550 ;;      Totals:         0       0       0       0       0       0       0
   551 ;;Total ram usage:        0 bytes
   552 ;; Hardware stack levels used:    1
   553 ;; Hardware stack levels required when called:    3
   554 ;; This function calls:
   555 ;;		_I2C_Start
   556 ;; This function is called by:
   557 ;;		_main
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text5
   562  000782                     __ptext5:
   563                           	opt callstack 0
   564  000782                     _DAC_Init:
   565                           	opt callstack 27
   566  000782                     
   567                           ;DAC_util.c: 6:     TRISC5 = 0;
   568  000782  9A94               	bcf	3988,5,c	;volatile
   569  000784  0EC4               	movlw	196
   570  000786  EC5D  F003         	call	_I2C_Start
   571  00078A  0012               	return		;funcret
   572  00078C                     __end_of_DAC_Init:
   573                           	opt callstack 0
   574                           
   575 ;; *************** function _I2C_Start *****************
   576 ;; Defined at:
   577 ;;		line 25 in file "i2c_util.c"
   578 ;; Parameters:    Size  Location     Type
   579 ;;  slave_write_    1    wreg     unsigned char 
   580 ;; Auto vars:     Size  Location     Type
   581 ;;  slave_write_    1    1[COMRAM] unsigned char 
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      unsigned char 
   584 ;; Registers used:
   585 ;;		wreg, status,2, cstack
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   591 ;;      Params:         0       0       0       0       0       0       0
   592 ;;      Locals:         1       0       0       0       0       0       0
   593 ;;      Temps:          0       0       0       0       0       0       0
   594 ;;      Totals:         1       0       0       0       0       0       0
   595 ;;Total ram usage:        1 bytes
   596 ;; Hardware stack levels used:    1
   597 ;; Hardware stack levels required when called:    2
   598 ;; This function calls:
   599 ;;		_I2C_Write
   600 ;; This function is called by:
   601 ;;		_DAC_Init
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           	psect	text6
   606  0006BA                     __ptext6:
   607                           	opt callstack 0
   608  0006BA                     _I2C_Start:
   609                           	opt callstack 27
   610                           
   611                           ;incstack = 0
   612                           ;I2C_Start@slave_write_address stored from wreg
   613  0006BA  6E02               	movwf	I2C_Start@slave_write_address^0,c
   614  0006BC                     
   615                           ;i2c_util.c: 27:     SSPCON2bits.SEN = 1;
   616  0006BC  80C5               	bsf	197,0,c	;volatile
   617  0006BE                     l70:
   618  0006BE  B0C5               	btfsc	197,0,c	;volatile
   619  0006C0  EF64  F003         	goto	u31
   620  0006C4  EF66  F003         	goto	u30
   621  0006C8                     u31:
   622  0006C8  EF5F  F003         	goto	l70
   623  0006CC                     u30:
   624  0006CC                     
   625                           ;i2c_util.c: 33:     SSPIF = 0;
   626  0006CC  969E               	bcf	3998,3,c	;volatile
   627                           
   628                           ;i2c_util.c: 36:     if (!SSPSTATbits.S)
   629  0006CE  B6C7               	btfsc	199,3,c	;volatile
   630  0006D0  EF6C  F003         	goto	u41
   631  0006D4  EF6E  F003         	goto	u40
   632  0006D8                     u41:
   633  0006D8  EF70  F003         	goto	l827
   634  0006DC                     u40:
   635  0006DC  EF73  F003         	goto	l74
   636  0006E0                     l827:
   637                           
   638                           ;i2c_util.c: 40:     return (I2C_Write(slave_write_address));;	Return value of _I2C_Star
      +                          t is never used
   639  0006E0  5002               	movf	I2C_Start@slave_write_address^0,w,c
   640  0006E2  EC74  F003         	call	_I2C_Write
   641  0006E6                     l74:
   642  0006E6  0012               	return		;funcret
   643  0006E8                     __end_of_I2C_Start:
   644                           	opt callstack 0
   645                           
   646 ;; *************** function _I2C_Write *****************
   647 ;; Defined at:
   648 ;;		line 51 in file "i2c_util.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;  data            1    wreg     unsigned char 
   651 ;; Auto vars:     Size  Location     Type
   652 ;;  data            1    0[COMRAM] unsigned char 
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      unsigned char 
   655 ;; Registers used:
   656 ;;		wreg, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   662 ;;      Params:         0       0       0       0       0       0       0
   663 ;;      Locals:         1       0       0       0       0       0       0
   664 ;;      Temps:          0       0       0       0       0       0       0
   665 ;;      Totals:         1       0       0       0       0       0       0
   666 ;;Total ram usage:        1 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    1
   669 ;; This function calls:
   670 ;;		_I2C_Ready
   671 ;; This function is called by:
   672 ;;		_I2C_Start
   673 ;;		_DAC_Start
   674 ;;		_DAC_Write
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           	psect	text7
   679  0006E8                     __ptext7:
   680                           	opt callstack 0
   681  0006E8                     _I2C_Write:
   682                           	opt callstack 28
   683                           
   684                           ;incstack = 0
   685                           ;I2C_Write@data stored from wreg
   686  0006E8  6E01               	movwf	I2C_Write@data^0,c
   687  0006EA                     
   688                           ;i2c_util.c: 53:     SSPBUF = data;
   689  0006EA  C001  FFC9         	movff	I2C_Write@data,4041	;volatile
   690  0006EE                     
   691                           ;i2c_util.c: 56:     I2C_Ready();
   692  0006EE  ECAC  F003         	call	_I2C_Ready	;wreg free
   693  0006F2                     
   694                           ;i2c_util.c: 59:     if (ACKSTAT)
   695  0006F2  ACC5               	btfss	4037,6,c	;volatile
   696  0006F4  EF7E  F003         	goto	u21
   697  0006F8  EF80  F003         	goto	u20
   698  0006FC                     u21:
   699  0006FC  EF83  F003         	goto	l819
   700  000700                     u20:
   701  000700                     
   702                           ;i2c_util.c: 60:         return 1;
   703  000700  0E01               	movlw	1
   704  000702  EF84  F003         	goto	l84
   705  000706                     l819:
   706                           
   707                           ;i2c_util.c: 62:         return 2;
   708  000706  0E02               	movlw	2
   709  000708                     l84:
   710  000708  0012               	return		;funcret
   711  00070A                     __end_of_I2C_Write:
   712                           	opt callstack 0
   713                           
   714 ;; *************** function _I2C_Ready *****************
   715 ;; Defined at:
   716 ;;		line 43 in file "i2c_util.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;		None
   719 ;; Auto vars:     Size  Location     Type
   720 ;;		None
   721 ;; Return value:  Size  Location     Type
   722 ;;                  1    wreg      void 
   723 ;; Registers used:
   724 ;;		None
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   730 ;;      Params:         0       0       0       0       0       0       0
   731 ;;      Locals:         0       0       0       0       0       0       0
   732 ;;      Temps:          0       0       0       0       0       0       0
   733 ;;      Totals:         0       0       0       0       0       0       0
   734 ;;Total ram usage:        0 bytes
   735 ;; Hardware stack levels used:    1
   736 ;; This function calls:
   737 ;;		Nothing
   738 ;; This function is called by:
   739 ;;		_I2C_Write
   740 ;;		_I2C_Read
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text8
   745  000758                     __ptext8:
   746                           	opt callstack 0
   747  000758                     _I2C_Ready:
   748                           	opt callstack 28
   749  000758                     l77:
   750  000758  A69E               	btfss	3998,3,c	;volatile
   751  00075A  EFB1  F003         	goto	u11
   752  00075E  EFB3  F003         	goto	u10
   753  000762                     u11:
   754  000762  EFAC  F003         	goto	l77
   755  000766                     u10:
   756  000766                     
   757                           ;i2c_util.c: 48:     SSPIF = 0;
   758  000766  969E               	bcf	3998,3,c	;volatile
   759  000768  0012               	return		;funcret
   760  00076A                     __end_of_I2C_Ready:
   761                           	opt callstack 0
   762                           
   763                           	psect	rparam
   764  0000                     tosu	equ	0xFFF
   765                           tosh	equ	0xFFE
   766                           tosl	equ	0xFFD
   767                           stkptr	equ	0xFFC
   768                           pclatu	equ	0xFFB
   769                           pclath	equ	0xFFA
   770                           pcl	equ	0xFF9
   771                           tblptru	equ	0xFF8
   772                           tblptrh	equ	0xFF7
   773                           tblptrl	equ	0xFF6
   774                           tablat	equ	0xFF5
   775                           prodh	equ	0xFF4
   776                           prodl	equ	0xFF3
   777                           indf0	equ	0xFEF
   778                           postinc0	equ	0xFEE
   779                           postdec0	equ	0xFED
   780                           preinc0	equ	0xFEC
   781                           plusw0	equ	0xFEB
   782                           fsr0h	equ	0xFEA
   783                           fsr0l	equ	0xFE9
   784                           wreg	equ	0xFE8
   785                           indf1	equ	0xFE7
   786                           postinc1	equ	0xFE6
   787                           postdec1	equ	0xFE5
   788                           preinc1	equ	0xFE4
   789                           plusw1	equ	0xFE3
   790                           fsr1h	equ	0xFE2
   791                           fsr1l	equ	0xFE1
   792                           bsr	equ	0xFE0
   793                           indf2	equ	0xFDF
   794                           postinc2	equ	0xFDE
   795                           postdec2	equ	0xFDD
   796                           preinc2	equ	0xFDC
   797                           plusw2	equ	0xFDB
   798                           fsr2h	equ	0xFDA
   799                           fsr2l	equ	0xFD9
   800                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      9       9
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_DAC_Write
    _DAC_Write->_I2C_Write
    _DAC_Start->_I2C_Write
    _DAC_Init->_I2C_Start
    _I2C_Start->_I2C_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     463
                                              4 COMRAM     5     5      0
                           _DAC_Init
                          _DAC_Start
                          _DAC_Write
                           _I2C_Init
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DAC_Write                                            3     1      2     264
                                              1 COMRAM     3     1      2
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DAC_Start                                            1     1      0      30
                                              1 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DAC_Init                                             0     0      0      30
                          _I2C_Start
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            1     1      0      30
                                              1 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      15
                                              0 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (3) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Init
     _I2C_Start
       _I2C_Write
         _I2C_Ready
   _DAC_Start
     _I2C_Write
       _I2C_Ready
   _DAC_Write
     _I2C_Write
       _I2C_Ready
   _I2C_Init
   _I2C_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      9       9       1        7.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon May 18 11:43:31 2020

          __size_of_I2C_Ready 0012            __size_of_I2C_Start 002E                   _SSPSTATbits 000FC7  
          __size_of_I2C_Write 0022                            l19 0614                            l70 06BE  
                          l80 0768                            l72 06CC                            l74 06E6  
                          l90 0752                            l67 0726                            l84 0708  
                          l92 0756                            l77 0758                            l79 0766  
                          l88 0744                            u10 0766                            u11 0762  
                          u20 0700                            u21 06FC                            u30 06CC  
                          u31 06C8                            u40 06DC                            u41 06D8  
                          u50 0752                            u51 074E                   __CFG_OSC$HS 000000  
          __size_of_DAC_Start 000A            __size_of_DAC_Write 001A                           l123 078A  
                         l126 0780                           l129 0740                           l811 06F2  
                         l805 0758                           l813 0700                           l807 06EA  
                         l823 06BC                           l911 072C                           l831 070A  
                         l809 06EE                           l841 0782                           l913 0736  
                         l833 070E                           l921 0610                           l819 0706  
                         l827 06E0                           l843 0784                           l835 0710  
                         l931 0638                           l923 061E                           l845 077A  
                         l909 0728                           l837 0722                           l941 067E  
                         l933 0648                           l925 062A                           l917 0604  
                         l839 0724                           l943 0690                           l935 064C  
                         l927 062E                           l919 0608                           l857 0742  
                         l945 069A                           l937 065C                           l929 0632  
                         l939 0672                           u120 0672                           u121 066E  
                         u130 0690                           u131 068C                           u147 06A4  
                         _PEN 007E2A                           wreg 000FE8                  __CFG_WDT$OFF 000000  
                        _RCEN 007E2B                          _main 0604              __end_of_I2C_Init 0728  
            __end_of_I2C_Stop 0758              __end_of_DAC_Init 078C                          start 0000  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000                         ?_main 0001  
                       _ACKEN 007E2C                         _ACKDT 007E2D                         _SSPIE 007CEB  
                       _SSPIF 007CF3             __end_of_I2C_Ready 076A                         main@i 0008  
                       main@j 0007             __end_of_I2C_Start 06E8             __end_of_I2C_Write 070A  
                       status 000FD8             __end_of_DAC_Start 0782             __end_of_DAC_Write 0742  
             __initialization 076A                  __end_of_main 06BA                 DAC_Write@data 0002  
                      ??_main 0005                 __activetblptr 000001                        _ADCON1 000FC1  
                      _SSPADD 000FC8                        _TRISC3 007CA3                        _TRISC4 007CA4  
                      _TRISC5 007CA5                        _SSPBUF 000FC9                     ?_I2C_Init 0001  
                   ?_I2C_Stop 0001                  __mediumconst 0000                     ?_DAC_Init 0001  
                      tblptrh 000FF7                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 076A                 ___rparam_used 000001                __pcstackCOMRAM 0001  
                  ??_I2C_Init 0001                    ??_I2C_Stop 0001                    ??_DAC_Init 0003  
                     _ACKSTAT 007E2E                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7             _DAC_SLAVE_ADDRESS 0601                     _I2C_Ready 0758  
                   _I2C_Start 06BA                     _I2C_Write 06E8                       __Hparam 0000  
                     __Lparam 0000                     _DAC_Start 0778                     _DAC_Write 0728  
                __psmallconst 0600                       __pcinit 076A                       __ramtop 0600  
                     __ptext0 0604                       __ptext1 0742                       __ptext2 070A  
                     __ptext3 0728                       __ptext4 0778                       __ptext5 0782  
                     __ptext6 06BA                       __ptext7 06E8                       __ptext8 0758  
        end_of_initialization 076A     __end_of_DAC_SLAVE_ADDRESS 0602                    ?_I2C_Ready 0001  
                  ?_I2C_Start 0001                    ?_I2C_Write 0001                    ?_DAC_Start 0001  
                  ?_DAC_Write 0002             __size_of_I2C_Init 001E             __size_of_I2C_Stop 0016  
           __size_of_DAC_Init 000A           start_initialization 076A                   ??_I2C_Ready 0001  
                 ??_I2C_Start 0002                   ??_I2C_Write 0001               DAC_Write@result 0004  
                 ??_DAC_Start 0002                   ??_DAC_Write 0004                   __smallconst 0600  
                    _I2C_Init 070A                      _I2C_Stop 0742                      _DAC_Init 0782  
           DAC_Start@endereco 0002  I2C_Start@slave_write_address 0002                      __Hrparam 0000  
                    __Lrparam 0000                  __Lsmallconst 0600                 I2C_Write@data 0001  
               __size_of_main 00B6                   _SSPCON2bits 000FC5  
